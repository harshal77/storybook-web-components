{
    "pipes": [],
    "interfaces": [
        {
            "name": "IMap",
            "id": "interface-IMap-053f7dbad5c9e1e3e05e6baf1d1f58e2cf126f2c911f1d2a1d90e0e937a207dd9e5e87866b4422bed62ef25f111d3f84e042435fe3ce1c1dad0c716e61f56e51",
            "file": "src/app/telco-maps/telco-maps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';\nimport mapIcons from './map-icons';\ndeclare let OverlappingMarkerSpiderfier: any;\ndeclare let MarkerClusterer: any;\n\nexport interface IMap {\n\tconfig?: IMapConfig;\n\tmarkers: IMapMarkers;\n}\n\nexport interface IMapConfig {\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n\ticonColor?: string;\n\ticonAnchorX?: number;\n\ticonAnchorY?: number;\n\tzoomLevelToChangeIcon?: number;\n\tcenterOnMapUpdate?: boolean;\n\tcenterOnBounds?: boolean;\n\tshowMesh?: boolean;\n\tbounds?: IMapBound;\n\tfilterMarkersOutsideBounds?: boolean;\n}\n\nexport interface IMapBound {\n\tstart: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n\tend: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n}\n\nexport type IMapMarkers = Array<IMapMarker>;\nexport interface IMapMarker {\n\tid: string;\n\tlat: string;\n\tlng: string;\n\ttitle: string;\n\tlabel: string;\n\tlink: string;\n\tmesh?: Array<string>;\n\tcolor?: string;\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n}\n\n@Component({\n\tselector: 'app-telco-maps',\n\ttemplateUrl: './telco-maps.component.html',\n\tstyleUrls: ['./telco-maps.component.scss'],\n})\nexport class TelcoMapsComponent implements AfterViewInit {\n\tmap: any;\n\toms: any;\n\tiw: any;\n\tbounds: any;\n\tzoomLevel = 1;\n\t_markers!: IMapMarkers;\n\tmarkersHash = {};\n\tmesh: any;\n\t_mapConfig: IMapConfig;\n\t_mapDefaultConfig: IMapConfig = {\n\t\ticonDefault: 'SITE',\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\n\t\ticonColor: '#E04B4B',\n\t\ticonAnchorX: 31,\n\t\ticonAnchorY: -33,\n\t\tzoomLevelToChangeIcon: 14,\n\t\tcenterOnMapUpdate: true,\n\t\tcenterOnBounds: true,\n\t\tshowMesh: true,\n\t\tfilterMarkersOutsideBounds: false,\n\t};\n\tstaticMarker: any;\n\tviewInit = false;\n\tboundsBeforeSpiderfy: any;\n\tpreSpiderfyTimerref: any;\n\tspiderfyTimerref: any;\n\tunspiderfyTimerref: any;\n\n\tneId = 'ne_135';\n\tticketid = 'ticket-123';\n\tdata2: any = [\n\t\t{\n\t\t\ttitle: 'CE-id-123',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t];\n\n\t@ViewChild('map') mapElement;\n\t@HostListener('window:resize', ['$event'])\n\tonResize() {\n\t\tthis.centerMap(this.map, this.map.markers);\n\t}\n\n\t@Input() set config(value: IMapConfig) {\n\t\tthis._mapConfig = { ...this._mapDefaultConfig, ...value };\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\t@Input() set markers(value: IMapMarkers) {\n\t\tlet filteredMarkers = value;\n\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\tfilteredMarkers = this.filterMarkers(value, this._mapConfig.bounds);\n\t\t}\n\t\tthis._markers = filteredMarkers;\n\t\t// console.log(this._markers);\n\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\n\t@Output() showDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\t@Output() hideDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\tconstructor(private zone: NgZone) {}\n\n\tngAfterViewInit() {\n\t\tif (!(this._markers && this._markers.length > 0)) {\n\t\t\tthis.oneTimeSetup();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.oneTimeSetup();\n\n\t\tthis.resetMarkers();\n\n\t\tthis.viewInit = true;\n\t}\n\n\toneTimeSetup() {\n\t\t// Load map\n\t\tconst mapProperties = {\n\t\t\tcenter: new google.maps.LatLng(0, 0),\n\t\t\tzoom: 10,\n\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t\tfullscreenControl: false,\n\t\t\t// restriction: {\n\t\t\t//   latLngBounds: latLngBounds,\n\t\t\t//   strictBounds: false,\n\t\t\t// },\n\t\t};\n\n\t\tconst latLngBounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig && this._mapConfig.bounds) {\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\n\t\t\tmapProperties['restriction'] = {\n\t\t\t\tlatLngBounds: latLngBounds,\n\t\t\t\tstrictBounds: false,\n\t\t\t};\n\t\t}\n\n\t\t// HTML canvas keeps misfiring ApplicationRef.tick()\n\t\t// To prevent that, initialize canvas outside angular\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map = new google.maps.Map(this.mapElement.nativeElement, mapProperties);\n\t\t});\n\n\t\tif (this._mapConfig && this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.map.fitBounds(latLngBounds);\n\t\t}\n\n\t\t// Add markers array\n\t\tthis.map.markers = [];\n\n\t\t// Add marker listener array\n\t\tthis.map.markerListeners = [];\n\n\t\t// Add mesh array\n\t\tthis.map.mesh = [];\n\n\t\t// Add cluster object\n\t\tthis.map.markerCluster = null;\n\n\t\t// // Create spiderfier instance\n\t\t// const options = {\n\t\t//   keepSpiderfied: true, // will keep spider chart open after clicking on a marker to show Infowindow\n\t\t//   markersWontMove: true, // we promise not to move any markers, allowing optimizations\n\t\t//   markersWontHide: true, // we promise not to change visibility of any markers, allowing optimizations\n\t\t//   basicFormatEvents: true, // allow the library to skip calculating advanced formatting information\n\t\t//   minZoomLevel: this._mapConfig.zoomLevelToChangeIcon, // minimum zoom level at which cluster will spiderfy\n\t\t// };\n\t\t// this.oms = new OverlappingMarkerSpiderfier(this.map, options);\n\n\t\t// // Add info window\n\t\t// this.iw = new google.maps.InfoWindow();\n\n\t\t// Attach zoom change listener\n\t\tthis.listenToZoomChange(this.map);\n\t}\n\n\tresetMarkers() {\n\t\t// If markers already exist, remove them before plotting new ones\n\t\tif (this.map && this.map.markers && this.map.markers.length > 0) {\n\t\t\t// this.oms.removeAllMarkers();\n\t\t\tthis.map.markerCluster.clearMarkers();\n\n\t\t\tthis.map.mesh.forEach((e: any) => {\n\t\t\t\tthis.removeLine(e);\n\t\t\t});\n\t\t\tthis.map.markerListeners.forEach((e: any) => {\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseover);\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseout);\n\t\t\t});\n\t\t\tthis.map.markers = [];\n\t\t\tthis.map.markerListeners = [];\n\t\t\tthis.map.mesh = [];\n\t\t\tthis.markersHash = {};\n\t\t}\n\n\t\t// If exists, add markers\n\t\tif (this._markers && this._markers.length > 0) {\n\t\t\t// Filter markers on map bounds\n\t\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\t\tthis._markers = this.filterMarkers(this._markers, this._mapConfig.bounds);\n\t\t\t}\n\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tthis.addMarker(e, this.map, this.oms, this.iw, this.map.markers);\n\t\t\t});\n\t\t}\n\n\t\t// Create marker cluster\n\t\tconst mcOptions = {\n\t\t\tstyles: [\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t],\n\t\t\t// styles: [\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 53,\n\t\t\t//     url: 'assets/images/map-markers/m1.png',\n\t\t\t//     width: 53,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 56,\n\t\t\t//     url: 'assets/images/map-markers/m2.png',\n\t\t\t//     width: 56,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 66,\n\t\t\t//     url: 'assets/images/map-markers/m3.png',\n\t\t\t//     width: 66,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 78,\n\t\t\t//     url: 'assets/images/map-markers/m4.png',\n\t\t\t//     width: 78,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 90,\n\t\t\t//     url: 'assets/images/map-markers/m5.png',\n\t\t\t//     width: 90,\n\t\t\t//   },\n\t\t\t// ],\n\t\t};\n\t\tthis.map.markerCluster = new MarkerClusterer(this.map, this.map.markers, mcOptions);\n\n\t\t// If mesh enabled, add mesh\n\t\tif (this._mapConfig.showMesh) {\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tif (e.mesh && e.mesh.length > 0) {\n\t\t\t\t\te.mesh.forEach((m) => {\n\t\t\t\t\t\tthis.addLine(this.map, e.id, m);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Center\n\t\tif (this._mapConfig.centerOnMapUpdate) {\n\t\t\tthis.centerMap(this.map, this.map.markers);\n\t\t}\n\t\t// else {\n\t\t//   // fit to bounds\n\t\t//   this.map.fitBounds(this.bounds);\n\t\t// }\n\t}\n\n\taddMarker(marker: any, map: any, oms = this.oms, iw: google.maps.InfoWindow = this.iw, markers: Array<google.maps.Marker>) {\n\t\tconst mapMarker = this.getMapMarker(map, marker);\n\n\t\tmarkers.push(mapMarker);\n\n\t\t// Attach marker hover listener\n\t\tthis.listenToMarkerHover(mapMarker);\n\n\t\tthis.markersHash[marker.id] = { lat: marker.lat, lng: marker.lng };\n\n\t\t// oms.trackMarker(mapMarker);\n\n\t\t// oms.addListener('click', function (mapMarker, event: Event) {\n\t\t//   iw.setContent(mapMarker.description);\n\t\t//   iw.open(map, mapMarker);\n\t\t// });\n\n\t\t// oms.addListener('pre-spiderfy', (marker: Element) => {\n\t\t//   this.onSpiderfierEvent(this.map, [marker], 'pre-spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('spiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('unspiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'unspiderfy');\n\t\t// });\n\t}\n\n\taddLine(map: any, sourceId: string, destinationId: string) {\n\t\tconst sMarker = this.markersHash[sourceId];\n\t\tconst dMarker = this.markersHash[destinationId];\n\t\tif (!sMarker || !dMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst source = new google.maps.LatLng(sMarker.lat, sMarker.lng);\n\t\tconst destination = new google.maps.LatLng(dMarker.lat, dMarker.lng);\n\n\t\tconst line = new google.maps.Polyline({\n\t\t\tmap: map,\n\t\t\tpath: [source, destination],\n\t\t\tstrokeColor: '#444',\n\t\t\tstrokeWeight: 1.5,\n\t\t\tzIndex: +google.maps.Marker.MAX_ZINDEX + 1,\n\t\t});\n\n\t\tmap.mesh.push(line);\n\t}\n\n\tremoveLine(line) {\n\t\tline.setMap(null);\n\t}\n\n\tgetMapMarker(map, marker) {\n\t\tconst locationAddressLatLng = new google.maps.LatLng(marker.lat, marker.lng);\n\t\t// const infoContent =\n\t\t//   '<div class=\"locationInfo\">' +\n\t\t//   '<div><strong>' +\n\t\t//   marker.title +\n\t\t//   '</strong></div>' +\n\t\t//   '<div>' +\n\t\t//   marker.label +\n\t\t//   '</div>' +\n\t\t//   '<a href=\"' +\n\t\t//   marker.link +\n\t\t//   '\">Se profil</a></div>';\n\n\t\t// const infoContent = this.getinfoContent();\n\n\t\tconst iconDefault = this.getMapMarkerIcon(marker, marker.iconDefault ? marker.iconDefault : this._mapConfig.iconDefault);\n\t\tconst iconZoomed = this.getMapMarkerIcon(marker, marker.iconZoomed ? marker.iconZoomed : this._mapConfig.iconZoomed);\n\t\tconst iconSpiderfied = this.getMapMarkerIcon(marker, marker.iconSpiderfied ? marker.iconSpiderfied : this._mapConfig.iconSpiderfied);\n\n\t\tconst mapMarker = new google.maps.Marker({\n\t\t\tmap: map,\n\t\t\tposition: locationAddressLatLng,\n\t\t\ticon: map.getZoom() < this._mapConfig.zoomLevelToChangeIcon ? iconDefault : iconZoomed,\n\t\t});\n\t\t// mapMarker.set('description', infoContent);\n\t\tmapMarker.set('iconDefault', iconDefault);\n\t\tmapMarker.set('iconZoomed', iconZoomed);\n\t\tmapMarker.set('iconSpiderfied', iconSpiderfied);\n\n\t\treturn mapMarker;\n\t}\n\n\tgetinfoContent() {\n\t\tconst htmlStr =\n\t\t\t`<div id=\"map-content-box\">\n      <div class=\"header-wrapper\">\n        <div class=\"left-box\">\n          <div class=\"line1\">\n            <p id=\"pid\">` +\n\t\t\tthis.neId +\n\t\t\t`</p>\n      </div>\n      <div class=\"line2\">\n        <p id=\"pid\" class=\" opacity50 margin10\"> Alarms:` +\n\t\t\t300 +\n\t\t\t`</p>\n      <p id=\"pid\" class=\"opacity50\">Ticket:` +\n\t\t\t200 +\n\t\t\t`</p>\n      </div>\n    </div>\n    <div class=\"right-box\">\n      <div class=\"icon-box margin10 \"></div>\n      <div class=\"icon-box\"></div>\n    </div>\n  </div>\n  <div class=\"body-wrapper\">` +\n\t\t\tthis.generateLayout() +\n\t\t\t`  </div>\n      </div>\n      `;\n\n\t\treturn htmlStr;\n\t}\n\n\tgenerateLayout() {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < this.data2.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t` <div class=\"row\">\n        <div class=\"body-row\">\n          <p id=\"pid\" class=\"text\">` +\n\t\t\t\tthis.data2[i].title +\n\t\t\t\t`</p>\n        </div>\n        <div class=\"right-box\">` +\n\t\t\t\tthis.getActions(this.data2[i].actions) +\n\t\t\t\t`</div>\n        </div>`;\n\t\t}\n\t\treturn str;\n\t}\n\n\tgetActions(data) {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < data.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t`<div class=\"icon-box margin10\">\n        ` + `</div>`;\n\t\t\treturn str;\n\t\t}\n\t}\n\n\tgetMapMarkerIcon(marker: any, icon: any) {\n\t\t// var iconDot = {\n\t\t//   path: 'M-3,0a3,3 0 1,0 6,0a3,3 0 1,0 -6,0',\n\t\t//   fillColor: 'red',\n\t\t//   fillOpacity: 1,\n\t\t//   strokeColor: 'transparent',\n\t\t//   anchor: new google.maps.Point(0, 0),\n\t\t// };\n\n\t\treturn {\n\t\t\tpath: mapIcons.markers[icon.toUpperCase()],\n\t\t\tfillColor: marker.color ? marker.color : this._mapConfig.iconColor,\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeColor: 'transparent',\n\t\t\tanchor: new google.maps.Point(this._mapConfig.iconAnchorX, this._mapConfig.iconAnchorY),\n\t\t\tscale: 1,\n\t\t};\n\t}\n\n\t// removeMarker(marker) {\n\t//   this.oms.removeMarker(marker);\n\t// }\n\n\t// removeAllMarkers() {\n\t//   this.oms.removeAllMarkers();\n\t// }\n\n\tonSpiderfierEvent(map: any, markers: any, type: string) {\n\t\tswitch (type) {\n\t\t\tcase 'pre-spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.preSpiderfyTimerref) return;\n\t\t\t\tthis.preSpiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.preSpiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Delete static marker if already exists\n\t\t\t\t// (Happens when you click on a marker when another\n\t\t\t\t// marker is already spiderfied)\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\tthis.staticMarker = new google.maps.Marker({\n\t\t\t\t\tmap: map,\n\t\t\t\t\tposition: new google.maps.LatLng(markers[0].position.lat(), markers[0].position.lng()),\n\t\t\t\t\ticon: markers[0].iconZoomed,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.spiderfyTimerref) return;\n\t\t\t\tthis.spiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.spiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Change icon\n\t\t\t\tmarkers.forEach((e: any) => {\n\t\t\t\t\te.setIcon(e.iconSpiderfied);\n\t\t\t\t});\n\n\t\t\t\t// // Center\n\t\t\t\t// this.boundsBeforeSpiderfy = this.bounds;\n\t\t\t\t// this.centerMap(map, markers);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unspiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.unspiderfyTimerref) return;\n\t\t\t\tthis.unspiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.unspiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Remove static marker\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\t// Change icon\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst zoomed = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\t\t\t\t\tmarkers.forEach((e) => {\n\t\t\t\t\t\te.setIcon(zoomed ? e.iconZoomed : e.iconDefault);\n\t\t\t\t\t});\n\t\t\t\t}, 1);\n\n\t\t\t\t// // Center\n\t\t\t\t// this.bounds = this.boundsBeforeSpiderfy;\n\t\t\t\t// map.fitBounds(this.bounds);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tcenterMap(map: any, markers: any) {\n\t\tthis.bounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\t\t} else {\n\t\t\tmarkers.forEach((marker: any) => {\n\t\t\t\tconst latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());\n\t\t\t\tthis.bounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t\t// fit to bounds\n\t\tmap.fitBounds(this.bounds);\n\n\t\t// zoom out if greater than threshold\n\t\tsetTimeout((_) => {\n\t\t\tmap.getZoom() <= this._mapConfig.zoomLevelToChangeIcon ? null : map.setZoom(this._mapConfig.zoomLevelToChangeIcon);\n\t\t}, 1);\n\t}\n\n\tlistenToZoomChange(map: any) {\n\t\tgoogle.maps.event.addListener(map, 'zoom_changed', () => {\n\t\t\tthis.updateMapIcon(map);\n\t\t});\n\t}\n\n\tlistenToMarkerHover(marker: any) {\n\t\tconst mouseover = marker.addListener('mouseover', (e: any) => {\n\t\t\tconst index = this._markers.findIndex((marker) => {\n\t\t\t\treturn +marker.lat === +e.latLng.lat() && +marker.lng === +e.latLng.lng();\n\t\t\t});\n\t\t\t// console.log(\n\t\t\t//   'Mousein',\n\t\t\t//   e.latLng.lat(),\n\t\t\t//   e.latLng.lng(),\n\t\t\t//   this._markers,\n\t\t\t//   index,\n\t\t\t// );\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.showDialog.emit({\n\t\t\t\t\tmarker: this._markers[index],\n\t\t\t\t\tevent: e.domEvent,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst mouseout = marker.addListener('mouseout', (e: any) => {\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.hideDialog.emit(e.domEvent);\n\t\t\t});\n\t\t});\n\n\t\tthis.map.markerListeners.push({\n\t\t\tmouseover,\n\t\t\tmouseout,\n\t\t});\n\t}\n\n\t// unlistenToMarkerClick(_markers) {\n\t//   google.maps.event.clearListeners(marker, 'click', () => {\n\t//   });\n\t// }\n\n\tupdateMapIcon(map) {\n\t\tif (!this.map || !this.map.markers || !this.map.markers.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevZoomLevel = this.zoomLevel;\n\t\tthis.zoomLevel = this.map.getZoom();\n\t\tconst showZoomedIcon = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\n\t\t// Do not update icon if zoom threshold boundary is not crossed\n\t\tif (\n\t\t\t(prevZoomLevel < this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon) ||\n\t\t\t(prevZoomLevel >= this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel >= this._mapConfig.zoomLevelToChangeIcon)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (showZoomedIcon) {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconZoomed);\n\t\t\t});\n\t\t} else {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconDefault);\n\t\t\t});\n\t\t}\n\t}\n\n\tfilterMarkers(markers: any, bounds: any): any {\n\t\tconst filteredMarkers = markers.filter((marker) => {\n\t\t\tconst latS = Math.min(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst latE = Math.max(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst lngS = Math.min(+bounds.start.lng, +bounds.end.lng);\n\t\t\tconst lngE = Math.max(+bounds.start.lng, +bounds.end.lng);\n\n\t\t\tif (+marker.lat >= latS && +marker.lat <= latE && +marker.lng >= lngS && +marker.lng <= lngE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn filteredMarkers;\n\t}\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMapConfig",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "markers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMapMarkers",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMapBound",
            "id": "interface-IMapBound-053f7dbad5c9e1e3e05e6baf1d1f58e2cf126f2c911f1d2a1d90e0e937a207dd9e5e87866b4422bed62ef25f111d3f84e042435fe3ce1c1dad0c716e61f56e51",
            "file": "src/app/telco-maps/telco-maps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';\nimport mapIcons from './map-icons';\ndeclare let OverlappingMarkerSpiderfier: any;\ndeclare let MarkerClusterer: any;\n\nexport interface IMap {\n\tconfig?: IMapConfig;\n\tmarkers: IMapMarkers;\n}\n\nexport interface IMapConfig {\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n\ticonColor?: string;\n\ticonAnchorX?: number;\n\ticonAnchorY?: number;\n\tzoomLevelToChangeIcon?: number;\n\tcenterOnMapUpdate?: boolean;\n\tcenterOnBounds?: boolean;\n\tshowMesh?: boolean;\n\tbounds?: IMapBound;\n\tfilterMarkersOutsideBounds?: boolean;\n}\n\nexport interface IMapBound {\n\tstart: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n\tend: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n}\n\nexport type IMapMarkers = Array<IMapMarker>;\nexport interface IMapMarker {\n\tid: string;\n\tlat: string;\n\tlng: string;\n\ttitle: string;\n\tlabel: string;\n\tlink: string;\n\tmesh?: Array<string>;\n\tcolor?: string;\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n}\n\n@Component({\n\tselector: 'app-telco-maps',\n\ttemplateUrl: './telco-maps.component.html',\n\tstyleUrls: ['./telco-maps.component.scss'],\n})\nexport class TelcoMapsComponent implements AfterViewInit {\n\tmap: any;\n\toms: any;\n\tiw: any;\n\tbounds: any;\n\tzoomLevel = 1;\n\t_markers!: IMapMarkers;\n\tmarkersHash = {};\n\tmesh: any;\n\t_mapConfig: IMapConfig;\n\t_mapDefaultConfig: IMapConfig = {\n\t\ticonDefault: 'SITE',\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\n\t\ticonColor: '#E04B4B',\n\t\ticonAnchorX: 31,\n\t\ticonAnchorY: -33,\n\t\tzoomLevelToChangeIcon: 14,\n\t\tcenterOnMapUpdate: true,\n\t\tcenterOnBounds: true,\n\t\tshowMesh: true,\n\t\tfilterMarkersOutsideBounds: false,\n\t};\n\tstaticMarker: any;\n\tviewInit = false;\n\tboundsBeforeSpiderfy: any;\n\tpreSpiderfyTimerref: any;\n\tspiderfyTimerref: any;\n\tunspiderfyTimerref: any;\n\n\tneId = 'ne_135';\n\tticketid = 'ticket-123';\n\tdata2: any = [\n\t\t{\n\t\t\ttitle: 'CE-id-123',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t];\n\n\t@ViewChild('map') mapElement;\n\t@HostListener('window:resize', ['$event'])\n\tonResize() {\n\t\tthis.centerMap(this.map, this.map.markers);\n\t}\n\n\t@Input() set config(value: IMapConfig) {\n\t\tthis._mapConfig = { ...this._mapDefaultConfig, ...value };\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\t@Input() set markers(value: IMapMarkers) {\n\t\tlet filteredMarkers = value;\n\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\tfilteredMarkers = this.filterMarkers(value, this._mapConfig.bounds);\n\t\t}\n\t\tthis._markers = filteredMarkers;\n\t\t// console.log(this._markers);\n\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\n\t@Output() showDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\t@Output() hideDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\tconstructor(private zone: NgZone) {}\n\n\tngAfterViewInit() {\n\t\tif (!(this._markers && this._markers.length > 0)) {\n\t\t\tthis.oneTimeSetup();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.oneTimeSetup();\n\n\t\tthis.resetMarkers();\n\n\t\tthis.viewInit = true;\n\t}\n\n\toneTimeSetup() {\n\t\t// Load map\n\t\tconst mapProperties = {\n\t\t\tcenter: new google.maps.LatLng(0, 0),\n\t\t\tzoom: 10,\n\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t\tfullscreenControl: false,\n\t\t\t// restriction: {\n\t\t\t//   latLngBounds: latLngBounds,\n\t\t\t//   strictBounds: false,\n\t\t\t// },\n\t\t};\n\n\t\tconst latLngBounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig && this._mapConfig.bounds) {\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\n\t\t\tmapProperties['restriction'] = {\n\t\t\t\tlatLngBounds: latLngBounds,\n\t\t\t\tstrictBounds: false,\n\t\t\t};\n\t\t}\n\n\t\t// HTML canvas keeps misfiring ApplicationRef.tick()\n\t\t// To prevent that, initialize canvas outside angular\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map = new google.maps.Map(this.mapElement.nativeElement, mapProperties);\n\t\t});\n\n\t\tif (this._mapConfig && this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.map.fitBounds(latLngBounds);\n\t\t}\n\n\t\t// Add markers array\n\t\tthis.map.markers = [];\n\n\t\t// Add marker listener array\n\t\tthis.map.markerListeners = [];\n\n\t\t// Add mesh array\n\t\tthis.map.mesh = [];\n\n\t\t// Add cluster object\n\t\tthis.map.markerCluster = null;\n\n\t\t// // Create spiderfier instance\n\t\t// const options = {\n\t\t//   keepSpiderfied: true, // will keep spider chart open after clicking on a marker to show Infowindow\n\t\t//   markersWontMove: true, // we promise not to move any markers, allowing optimizations\n\t\t//   markersWontHide: true, // we promise not to change visibility of any markers, allowing optimizations\n\t\t//   basicFormatEvents: true, // allow the library to skip calculating advanced formatting information\n\t\t//   minZoomLevel: this._mapConfig.zoomLevelToChangeIcon, // minimum zoom level at which cluster will spiderfy\n\t\t// };\n\t\t// this.oms = new OverlappingMarkerSpiderfier(this.map, options);\n\n\t\t// // Add info window\n\t\t// this.iw = new google.maps.InfoWindow();\n\n\t\t// Attach zoom change listener\n\t\tthis.listenToZoomChange(this.map);\n\t}\n\n\tresetMarkers() {\n\t\t// If markers already exist, remove them before plotting new ones\n\t\tif (this.map && this.map.markers && this.map.markers.length > 0) {\n\t\t\t// this.oms.removeAllMarkers();\n\t\t\tthis.map.markerCluster.clearMarkers();\n\n\t\t\tthis.map.mesh.forEach((e: any) => {\n\t\t\t\tthis.removeLine(e);\n\t\t\t});\n\t\t\tthis.map.markerListeners.forEach((e: any) => {\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseover);\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseout);\n\t\t\t});\n\t\t\tthis.map.markers = [];\n\t\t\tthis.map.markerListeners = [];\n\t\t\tthis.map.mesh = [];\n\t\t\tthis.markersHash = {};\n\t\t}\n\n\t\t// If exists, add markers\n\t\tif (this._markers && this._markers.length > 0) {\n\t\t\t// Filter markers on map bounds\n\t\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\t\tthis._markers = this.filterMarkers(this._markers, this._mapConfig.bounds);\n\t\t\t}\n\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tthis.addMarker(e, this.map, this.oms, this.iw, this.map.markers);\n\t\t\t});\n\t\t}\n\n\t\t// Create marker cluster\n\t\tconst mcOptions = {\n\t\t\tstyles: [\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t],\n\t\t\t// styles: [\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 53,\n\t\t\t//     url: 'assets/images/map-markers/m1.png',\n\t\t\t//     width: 53,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 56,\n\t\t\t//     url: 'assets/images/map-markers/m2.png',\n\t\t\t//     width: 56,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 66,\n\t\t\t//     url: 'assets/images/map-markers/m3.png',\n\t\t\t//     width: 66,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 78,\n\t\t\t//     url: 'assets/images/map-markers/m4.png',\n\t\t\t//     width: 78,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 90,\n\t\t\t//     url: 'assets/images/map-markers/m5.png',\n\t\t\t//     width: 90,\n\t\t\t//   },\n\t\t\t// ],\n\t\t};\n\t\tthis.map.markerCluster = new MarkerClusterer(this.map, this.map.markers, mcOptions);\n\n\t\t// If mesh enabled, add mesh\n\t\tif (this._mapConfig.showMesh) {\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tif (e.mesh && e.mesh.length > 0) {\n\t\t\t\t\te.mesh.forEach((m) => {\n\t\t\t\t\t\tthis.addLine(this.map, e.id, m);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Center\n\t\tif (this._mapConfig.centerOnMapUpdate) {\n\t\t\tthis.centerMap(this.map, this.map.markers);\n\t\t}\n\t\t// else {\n\t\t//   // fit to bounds\n\t\t//   this.map.fitBounds(this.bounds);\n\t\t// }\n\t}\n\n\taddMarker(marker: any, map: any, oms = this.oms, iw: google.maps.InfoWindow = this.iw, markers: Array<google.maps.Marker>) {\n\t\tconst mapMarker = this.getMapMarker(map, marker);\n\n\t\tmarkers.push(mapMarker);\n\n\t\t// Attach marker hover listener\n\t\tthis.listenToMarkerHover(mapMarker);\n\n\t\tthis.markersHash[marker.id] = { lat: marker.lat, lng: marker.lng };\n\n\t\t// oms.trackMarker(mapMarker);\n\n\t\t// oms.addListener('click', function (mapMarker, event: Event) {\n\t\t//   iw.setContent(mapMarker.description);\n\t\t//   iw.open(map, mapMarker);\n\t\t// });\n\n\t\t// oms.addListener('pre-spiderfy', (marker: Element) => {\n\t\t//   this.onSpiderfierEvent(this.map, [marker], 'pre-spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('spiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('unspiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'unspiderfy');\n\t\t// });\n\t}\n\n\taddLine(map: any, sourceId: string, destinationId: string) {\n\t\tconst sMarker = this.markersHash[sourceId];\n\t\tconst dMarker = this.markersHash[destinationId];\n\t\tif (!sMarker || !dMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst source = new google.maps.LatLng(sMarker.lat, sMarker.lng);\n\t\tconst destination = new google.maps.LatLng(dMarker.lat, dMarker.lng);\n\n\t\tconst line = new google.maps.Polyline({\n\t\t\tmap: map,\n\t\t\tpath: [source, destination],\n\t\t\tstrokeColor: '#444',\n\t\t\tstrokeWeight: 1.5,\n\t\t\tzIndex: +google.maps.Marker.MAX_ZINDEX + 1,\n\t\t});\n\n\t\tmap.mesh.push(line);\n\t}\n\n\tremoveLine(line) {\n\t\tline.setMap(null);\n\t}\n\n\tgetMapMarker(map, marker) {\n\t\tconst locationAddressLatLng = new google.maps.LatLng(marker.lat, marker.lng);\n\t\t// const infoContent =\n\t\t//   '<div class=\"locationInfo\">' +\n\t\t//   '<div><strong>' +\n\t\t//   marker.title +\n\t\t//   '</strong></div>' +\n\t\t//   '<div>' +\n\t\t//   marker.label +\n\t\t//   '</div>' +\n\t\t//   '<a href=\"' +\n\t\t//   marker.link +\n\t\t//   '\">Se profil</a></div>';\n\n\t\t// const infoContent = this.getinfoContent();\n\n\t\tconst iconDefault = this.getMapMarkerIcon(marker, marker.iconDefault ? marker.iconDefault : this._mapConfig.iconDefault);\n\t\tconst iconZoomed = this.getMapMarkerIcon(marker, marker.iconZoomed ? marker.iconZoomed : this._mapConfig.iconZoomed);\n\t\tconst iconSpiderfied = this.getMapMarkerIcon(marker, marker.iconSpiderfied ? marker.iconSpiderfied : this._mapConfig.iconSpiderfied);\n\n\t\tconst mapMarker = new google.maps.Marker({\n\t\t\tmap: map,\n\t\t\tposition: locationAddressLatLng,\n\t\t\ticon: map.getZoom() < this._mapConfig.zoomLevelToChangeIcon ? iconDefault : iconZoomed,\n\t\t});\n\t\t// mapMarker.set('description', infoContent);\n\t\tmapMarker.set('iconDefault', iconDefault);\n\t\tmapMarker.set('iconZoomed', iconZoomed);\n\t\tmapMarker.set('iconSpiderfied', iconSpiderfied);\n\n\t\treturn mapMarker;\n\t}\n\n\tgetinfoContent() {\n\t\tconst htmlStr =\n\t\t\t`<div id=\"map-content-box\">\n      <div class=\"header-wrapper\">\n        <div class=\"left-box\">\n          <div class=\"line1\">\n            <p id=\"pid\">` +\n\t\t\tthis.neId +\n\t\t\t`</p>\n      </div>\n      <div class=\"line2\">\n        <p id=\"pid\" class=\" opacity50 margin10\"> Alarms:` +\n\t\t\t300 +\n\t\t\t`</p>\n      <p id=\"pid\" class=\"opacity50\">Ticket:` +\n\t\t\t200 +\n\t\t\t`</p>\n      </div>\n    </div>\n    <div class=\"right-box\">\n      <div class=\"icon-box margin10 \"></div>\n      <div class=\"icon-box\"></div>\n    </div>\n  </div>\n  <div class=\"body-wrapper\">` +\n\t\t\tthis.generateLayout() +\n\t\t\t`  </div>\n      </div>\n      `;\n\n\t\treturn htmlStr;\n\t}\n\n\tgenerateLayout() {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < this.data2.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t` <div class=\"row\">\n        <div class=\"body-row\">\n          <p id=\"pid\" class=\"text\">` +\n\t\t\t\tthis.data2[i].title +\n\t\t\t\t`</p>\n        </div>\n        <div class=\"right-box\">` +\n\t\t\t\tthis.getActions(this.data2[i].actions) +\n\t\t\t\t`</div>\n        </div>`;\n\t\t}\n\t\treturn str;\n\t}\n\n\tgetActions(data) {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < data.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t`<div class=\"icon-box margin10\">\n        ` + `</div>`;\n\t\t\treturn str;\n\t\t}\n\t}\n\n\tgetMapMarkerIcon(marker: any, icon: any) {\n\t\t// var iconDot = {\n\t\t//   path: 'M-3,0a3,3 0 1,0 6,0a3,3 0 1,0 -6,0',\n\t\t//   fillColor: 'red',\n\t\t//   fillOpacity: 1,\n\t\t//   strokeColor: 'transparent',\n\t\t//   anchor: new google.maps.Point(0, 0),\n\t\t// };\n\n\t\treturn {\n\t\t\tpath: mapIcons.markers[icon.toUpperCase()],\n\t\t\tfillColor: marker.color ? marker.color : this._mapConfig.iconColor,\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeColor: 'transparent',\n\t\t\tanchor: new google.maps.Point(this._mapConfig.iconAnchorX, this._mapConfig.iconAnchorY),\n\t\t\tscale: 1,\n\t\t};\n\t}\n\n\t// removeMarker(marker) {\n\t//   this.oms.removeMarker(marker);\n\t// }\n\n\t// removeAllMarkers() {\n\t//   this.oms.removeAllMarkers();\n\t// }\n\n\tonSpiderfierEvent(map: any, markers: any, type: string) {\n\t\tswitch (type) {\n\t\t\tcase 'pre-spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.preSpiderfyTimerref) return;\n\t\t\t\tthis.preSpiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.preSpiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Delete static marker if already exists\n\t\t\t\t// (Happens when you click on a marker when another\n\t\t\t\t// marker is already spiderfied)\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\tthis.staticMarker = new google.maps.Marker({\n\t\t\t\t\tmap: map,\n\t\t\t\t\tposition: new google.maps.LatLng(markers[0].position.lat(), markers[0].position.lng()),\n\t\t\t\t\ticon: markers[0].iconZoomed,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.spiderfyTimerref) return;\n\t\t\t\tthis.spiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.spiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Change icon\n\t\t\t\tmarkers.forEach((e: any) => {\n\t\t\t\t\te.setIcon(e.iconSpiderfied);\n\t\t\t\t});\n\n\t\t\t\t// // Center\n\t\t\t\t// this.boundsBeforeSpiderfy = this.bounds;\n\t\t\t\t// this.centerMap(map, markers);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unspiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.unspiderfyTimerref) return;\n\t\t\t\tthis.unspiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.unspiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Remove static marker\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\t// Change icon\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst zoomed = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\t\t\t\t\tmarkers.forEach((e) => {\n\t\t\t\t\t\te.setIcon(zoomed ? e.iconZoomed : e.iconDefault);\n\t\t\t\t\t});\n\t\t\t\t}, 1);\n\n\t\t\t\t// // Center\n\t\t\t\t// this.bounds = this.boundsBeforeSpiderfy;\n\t\t\t\t// map.fitBounds(this.bounds);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tcenterMap(map: any, markers: any) {\n\t\tthis.bounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\t\t} else {\n\t\t\tmarkers.forEach((marker: any) => {\n\t\t\t\tconst latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());\n\t\t\t\tthis.bounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t\t// fit to bounds\n\t\tmap.fitBounds(this.bounds);\n\n\t\t// zoom out if greater than threshold\n\t\tsetTimeout((_) => {\n\t\t\tmap.getZoom() <= this._mapConfig.zoomLevelToChangeIcon ? null : map.setZoom(this._mapConfig.zoomLevelToChangeIcon);\n\t\t}, 1);\n\t}\n\n\tlistenToZoomChange(map: any) {\n\t\tgoogle.maps.event.addListener(map, 'zoom_changed', () => {\n\t\t\tthis.updateMapIcon(map);\n\t\t});\n\t}\n\n\tlistenToMarkerHover(marker: any) {\n\t\tconst mouseover = marker.addListener('mouseover', (e: any) => {\n\t\t\tconst index = this._markers.findIndex((marker) => {\n\t\t\t\treturn +marker.lat === +e.latLng.lat() && +marker.lng === +e.latLng.lng();\n\t\t\t});\n\t\t\t// console.log(\n\t\t\t//   'Mousein',\n\t\t\t//   e.latLng.lat(),\n\t\t\t//   e.latLng.lng(),\n\t\t\t//   this._markers,\n\t\t\t//   index,\n\t\t\t// );\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.showDialog.emit({\n\t\t\t\t\tmarker: this._markers[index],\n\t\t\t\t\tevent: e.domEvent,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst mouseout = marker.addListener('mouseout', (e: any) => {\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.hideDialog.emit(e.domEvent);\n\t\t\t});\n\t\t});\n\n\t\tthis.map.markerListeners.push({\n\t\t\tmouseover,\n\t\t\tmouseout,\n\t\t});\n\t}\n\n\t// unlistenToMarkerClick(_markers) {\n\t//   google.maps.event.clearListeners(marker, 'click', () => {\n\t//   });\n\t// }\n\n\tupdateMapIcon(map) {\n\t\tif (!this.map || !this.map.markers || !this.map.markers.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevZoomLevel = this.zoomLevel;\n\t\tthis.zoomLevel = this.map.getZoom();\n\t\tconst showZoomedIcon = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\n\t\t// Do not update icon if zoom threshold boundary is not crossed\n\t\tif (\n\t\t\t(prevZoomLevel < this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon) ||\n\t\t\t(prevZoomLevel >= this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel >= this._mapConfig.zoomLevelToChangeIcon)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (showZoomedIcon) {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconZoomed);\n\t\t\t});\n\t\t} else {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconDefault);\n\t\t\t});\n\t\t}\n\t}\n\n\tfilterMarkers(markers: any, bounds: any): any {\n\t\tconst filteredMarkers = markers.filter((marker) => {\n\t\t\tconst latS = Math.min(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst latE = Math.max(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst lngS = Math.min(+bounds.start.lng, +bounds.end.lng);\n\t\t\tconst lngE = Math.max(+bounds.start.lng, +bounds.end.lng);\n\n\t\t\tif (+marker.lat >= latS && +marker.lat <= latE && +marker.lng >= lngS && +marker.lng <= lngE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn filteredMarkers;\n\t}\n}\n",
            "properties": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMapConfig",
            "id": "interface-IMapConfig-053f7dbad5c9e1e3e05e6baf1d1f58e2cf126f2c911f1d2a1d90e0e937a207dd9e5e87866b4422bed62ef25f111d3f84e042435fe3ce1c1dad0c716e61f56e51",
            "file": "src/app/telco-maps/telco-maps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';\nimport mapIcons from './map-icons';\ndeclare let OverlappingMarkerSpiderfier: any;\ndeclare let MarkerClusterer: any;\n\nexport interface IMap {\n\tconfig?: IMapConfig;\n\tmarkers: IMapMarkers;\n}\n\nexport interface IMapConfig {\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n\ticonColor?: string;\n\ticonAnchorX?: number;\n\ticonAnchorY?: number;\n\tzoomLevelToChangeIcon?: number;\n\tcenterOnMapUpdate?: boolean;\n\tcenterOnBounds?: boolean;\n\tshowMesh?: boolean;\n\tbounds?: IMapBound;\n\tfilterMarkersOutsideBounds?: boolean;\n}\n\nexport interface IMapBound {\n\tstart: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n\tend: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n}\n\nexport type IMapMarkers = Array<IMapMarker>;\nexport interface IMapMarker {\n\tid: string;\n\tlat: string;\n\tlng: string;\n\ttitle: string;\n\tlabel: string;\n\tlink: string;\n\tmesh?: Array<string>;\n\tcolor?: string;\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n}\n\n@Component({\n\tselector: 'app-telco-maps',\n\ttemplateUrl: './telco-maps.component.html',\n\tstyleUrls: ['./telco-maps.component.scss'],\n})\nexport class TelcoMapsComponent implements AfterViewInit {\n\tmap: any;\n\toms: any;\n\tiw: any;\n\tbounds: any;\n\tzoomLevel = 1;\n\t_markers!: IMapMarkers;\n\tmarkersHash = {};\n\tmesh: any;\n\t_mapConfig: IMapConfig;\n\t_mapDefaultConfig: IMapConfig = {\n\t\ticonDefault: 'SITE',\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\n\t\ticonColor: '#E04B4B',\n\t\ticonAnchorX: 31,\n\t\ticonAnchorY: -33,\n\t\tzoomLevelToChangeIcon: 14,\n\t\tcenterOnMapUpdate: true,\n\t\tcenterOnBounds: true,\n\t\tshowMesh: true,\n\t\tfilterMarkersOutsideBounds: false,\n\t};\n\tstaticMarker: any;\n\tviewInit = false;\n\tboundsBeforeSpiderfy: any;\n\tpreSpiderfyTimerref: any;\n\tspiderfyTimerref: any;\n\tunspiderfyTimerref: any;\n\n\tneId = 'ne_135';\n\tticketid = 'ticket-123';\n\tdata2: any = [\n\t\t{\n\t\t\ttitle: 'CE-id-123',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t];\n\n\t@ViewChild('map') mapElement;\n\t@HostListener('window:resize', ['$event'])\n\tonResize() {\n\t\tthis.centerMap(this.map, this.map.markers);\n\t}\n\n\t@Input() set config(value: IMapConfig) {\n\t\tthis._mapConfig = { ...this._mapDefaultConfig, ...value };\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\t@Input() set markers(value: IMapMarkers) {\n\t\tlet filteredMarkers = value;\n\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\tfilteredMarkers = this.filterMarkers(value, this._mapConfig.bounds);\n\t\t}\n\t\tthis._markers = filteredMarkers;\n\t\t// console.log(this._markers);\n\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\n\t@Output() showDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\t@Output() hideDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\tconstructor(private zone: NgZone) {}\n\n\tngAfterViewInit() {\n\t\tif (!(this._markers && this._markers.length > 0)) {\n\t\t\tthis.oneTimeSetup();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.oneTimeSetup();\n\n\t\tthis.resetMarkers();\n\n\t\tthis.viewInit = true;\n\t}\n\n\toneTimeSetup() {\n\t\t// Load map\n\t\tconst mapProperties = {\n\t\t\tcenter: new google.maps.LatLng(0, 0),\n\t\t\tzoom: 10,\n\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t\tfullscreenControl: false,\n\t\t\t// restriction: {\n\t\t\t//   latLngBounds: latLngBounds,\n\t\t\t//   strictBounds: false,\n\t\t\t// },\n\t\t};\n\n\t\tconst latLngBounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig && this._mapConfig.bounds) {\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\n\t\t\tmapProperties['restriction'] = {\n\t\t\t\tlatLngBounds: latLngBounds,\n\t\t\t\tstrictBounds: false,\n\t\t\t};\n\t\t}\n\n\t\t// HTML canvas keeps misfiring ApplicationRef.tick()\n\t\t// To prevent that, initialize canvas outside angular\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map = new google.maps.Map(this.mapElement.nativeElement, mapProperties);\n\t\t});\n\n\t\tif (this._mapConfig && this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.map.fitBounds(latLngBounds);\n\t\t}\n\n\t\t// Add markers array\n\t\tthis.map.markers = [];\n\n\t\t// Add marker listener array\n\t\tthis.map.markerListeners = [];\n\n\t\t// Add mesh array\n\t\tthis.map.mesh = [];\n\n\t\t// Add cluster object\n\t\tthis.map.markerCluster = null;\n\n\t\t// // Create spiderfier instance\n\t\t// const options = {\n\t\t//   keepSpiderfied: true, // will keep spider chart open after clicking on a marker to show Infowindow\n\t\t//   markersWontMove: true, // we promise not to move any markers, allowing optimizations\n\t\t//   markersWontHide: true, // we promise not to change visibility of any markers, allowing optimizations\n\t\t//   basicFormatEvents: true, // allow the library to skip calculating advanced formatting information\n\t\t//   minZoomLevel: this._mapConfig.zoomLevelToChangeIcon, // minimum zoom level at which cluster will spiderfy\n\t\t// };\n\t\t// this.oms = new OverlappingMarkerSpiderfier(this.map, options);\n\n\t\t// // Add info window\n\t\t// this.iw = new google.maps.InfoWindow();\n\n\t\t// Attach zoom change listener\n\t\tthis.listenToZoomChange(this.map);\n\t}\n\n\tresetMarkers() {\n\t\t// If markers already exist, remove them before plotting new ones\n\t\tif (this.map && this.map.markers && this.map.markers.length > 0) {\n\t\t\t// this.oms.removeAllMarkers();\n\t\t\tthis.map.markerCluster.clearMarkers();\n\n\t\t\tthis.map.mesh.forEach((e: any) => {\n\t\t\t\tthis.removeLine(e);\n\t\t\t});\n\t\t\tthis.map.markerListeners.forEach((e: any) => {\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseover);\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseout);\n\t\t\t});\n\t\t\tthis.map.markers = [];\n\t\t\tthis.map.markerListeners = [];\n\t\t\tthis.map.mesh = [];\n\t\t\tthis.markersHash = {};\n\t\t}\n\n\t\t// If exists, add markers\n\t\tif (this._markers && this._markers.length > 0) {\n\t\t\t// Filter markers on map bounds\n\t\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\t\tthis._markers = this.filterMarkers(this._markers, this._mapConfig.bounds);\n\t\t\t}\n\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tthis.addMarker(e, this.map, this.oms, this.iw, this.map.markers);\n\t\t\t});\n\t\t}\n\n\t\t// Create marker cluster\n\t\tconst mcOptions = {\n\t\t\tstyles: [\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t],\n\t\t\t// styles: [\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 53,\n\t\t\t//     url: 'assets/images/map-markers/m1.png',\n\t\t\t//     width: 53,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 56,\n\t\t\t//     url: 'assets/images/map-markers/m2.png',\n\t\t\t//     width: 56,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 66,\n\t\t\t//     url: 'assets/images/map-markers/m3.png',\n\t\t\t//     width: 66,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 78,\n\t\t\t//     url: 'assets/images/map-markers/m4.png',\n\t\t\t//     width: 78,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 90,\n\t\t\t//     url: 'assets/images/map-markers/m5.png',\n\t\t\t//     width: 90,\n\t\t\t//   },\n\t\t\t// ],\n\t\t};\n\t\tthis.map.markerCluster = new MarkerClusterer(this.map, this.map.markers, mcOptions);\n\n\t\t// If mesh enabled, add mesh\n\t\tif (this._mapConfig.showMesh) {\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tif (e.mesh && e.mesh.length > 0) {\n\t\t\t\t\te.mesh.forEach((m) => {\n\t\t\t\t\t\tthis.addLine(this.map, e.id, m);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Center\n\t\tif (this._mapConfig.centerOnMapUpdate) {\n\t\t\tthis.centerMap(this.map, this.map.markers);\n\t\t}\n\t\t// else {\n\t\t//   // fit to bounds\n\t\t//   this.map.fitBounds(this.bounds);\n\t\t// }\n\t}\n\n\taddMarker(marker: any, map: any, oms = this.oms, iw: google.maps.InfoWindow = this.iw, markers: Array<google.maps.Marker>) {\n\t\tconst mapMarker = this.getMapMarker(map, marker);\n\n\t\tmarkers.push(mapMarker);\n\n\t\t// Attach marker hover listener\n\t\tthis.listenToMarkerHover(mapMarker);\n\n\t\tthis.markersHash[marker.id] = { lat: marker.lat, lng: marker.lng };\n\n\t\t// oms.trackMarker(mapMarker);\n\n\t\t// oms.addListener('click', function (mapMarker, event: Event) {\n\t\t//   iw.setContent(mapMarker.description);\n\t\t//   iw.open(map, mapMarker);\n\t\t// });\n\n\t\t// oms.addListener('pre-spiderfy', (marker: Element) => {\n\t\t//   this.onSpiderfierEvent(this.map, [marker], 'pre-spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('spiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('unspiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'unspiderfy');\n\t\t// });\n\t}\n\n\taddLine(map: any, sourceId: string, destinationId: string) {\n\t\tconst sMarker = this.markersHash[sourceId];\n\t\tconst dMarker = this.markersHash[destinationId];\n\t\tif (!sMarker || !dMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst source = new google.maps.LatLng(sMarker.lat, sMarker.lng);\n\t\tconst destination = new google.maps.LatLng(dMarker.lat, dMarker.lng);\n\n\t\tconst line = new google.maps.Polyline({\n\t\t\tmap: map,\n\t\t\tpath: [source, destination],\n\t\t\tstrokeColor: '#444',\n\t\t\tstrokeWeight: 1.5,\n\t\t\tzIndex: +google.maps.Marker.MAX_ZINDEX + 1,\n\t\t});\n\n\t\tmap.mesh.push(line);\n\t}\n\n\tremoveLine(line) {\n\t\tline.setMap(null);\n\t}\n\n\tgetMapMarker(map, marker) {\n\t\tconst locationAddressLatLng = new google.maps.LatLng(marker.lat, marker.lng);\n\t\t// const infoContent =\n\t\t//   '<div class=\"locationInfo\">' +\n\t\t//   '<div><strong>' +\n\t\t//   marker.title +\n\t\t//   '</strong></div>' +\n\t\t//   '<div>' +\n\t\t//   marker.label +\n\t\t//   '</div>' +\n\t\t//   '<a href=\"' +\n\t\t//   marker.link +\n\t\t//   '\">Se profil</a></div>';\n\n\t\t// const infoContent = this.getinfoContent();\n\n\t\tconst iconDefault = this.getMapMarkerIcon(marker, marker.iconDefault ? marker.iconDefault : this._mapConfig.iconDefault);\n\t\tconst iconZoomed = this.getMapMarkerIcon(marker, marker.iconZoomed ? marker.iconZoomed : this._mapConfig.iconZoomed);\n\t\tconst iconSpiderfied = this.getMapMarkerIcon(marker, marker.iconSpiderfied ? marker.iconSpiderfied : this._mapConfig.iconSpiderfied);\n\n\t\tconst mapMarker = new google.maps.Marker({\n\t\t\tmap: map,\n\t\t\tposition: locationAddressLatLng,\n\t\t\ticon: map.getZoom() < this._mapConfig.zoomLevelToChangeIcon ? iconDefault : iconZoomed,\n\t\t});\n\t\t// mapMarker.set('description', infoContent);\n\t\tmapMarker.set('iconDefault', iconDefault);\n\t\tmapMarker.set('iconZoomed', iconZoomed);\n\t\tmapMarker.set('iconSpiderfied', iconSpiderfied);\n\n\t\treturn mapMarker;\n\t}\n\n\tgetinfoContent() {\n\t\tconst htmlStr =\n\t\t\t`<div id=\"map-content-box\">\n      <div class=\"header-wrapper\">\n        <div class=\"left-box\">\n          <div class=\"line1\">\n            <p id=\"pid\">` +\n\t\t\tthis.neId +\n\t\t\t`</p>\n      </div>\n      <div class=\"line2\">\n        <p id=\"pid\" class=\" opacity50 margin10\"> Alarms:` +\n\t\t\t300 +\n\t\t\t`</p>\n      <p id=\"pid\" class=\"opacity50\">Ticket:` +\n\t\t\t200 +\n\t\t\t`</p>\n      </div>\n    </div>\n    <div class=\"right-box\">\n      <div class=\"icon-box margin10 \"></div>\n      <div class=\"icon-box\"></div>\n    </div>\n  </div>\n  <div class=\"body-wrapper\">` +\n\t\t\tthis.generateLayout() +\n\t\t\t`  </div>\n      </div>\n      `;\n\n\t\treturn htmlStr;\n\t}\n\n\tgenerateLayout() {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < this.data2.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t` <div class=\"row\">\n        <div class=\"body-row\">\n          <p id=\"pid\" class=\"text\">` +\n\t\t\t\tthis.data2[i].title +\n\t\t\t\t`</p>\n        </div>\n        <div class=\"right-box\">` +\n\t\t\t\tthis.getActions(this.data2[i].actions) +\n\t\t\t\t`</div>\n        </div>`;\n\t\t}\n\t\treturn str;\n\t}\n\n\tgetActions(data) {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < data.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t`<div class=\"icon-box margin10\">\n        ` + `</div>`;\n\t\t\treturn str;\n\t\t}\n\t}\n\n\tgetMapMarkerIcon(marker: any, icon: any) {\n\t\t// var iconDot = {\n\t\t//   path: 'M-3,0a3,3 0 1,0 6,0a3,3 0 1,0 -6,0',\n\t\t//   fillColor: 'red',\n\t\t//   fillOpacity: 1,\n\t\t//   strokeColor: 'transparent',\n\t\t//   anchor: new google.maps.Point(0, 0),\n\t\t// };\n\n\t\treturn {\n\t\t\tpath: mapIcons.markers[icon.toUpperCase()],\n\t\t\tfillColor: marker.color ? marker.color : this._mapConfig.iconColor,\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeColor: 'transparent',\n\t\t\tanchor: new google.maps.Point(this._mapConfig.iconAnchorX, this._mapConfig.iconAnchorY),\n\t\t\tscale: 1,\n\t\t};\n\t}\n\n\t// removeMarker(marker) {\n\t//   this.oms.removeMarker(marker);\n\t// }\n\n\t// removeAllMarkers() {\n\t//   this.oms.removeAllMarkers();\n\t// }\n\n\tonSpiderfierEvent(map: any, markers: any, type: string) {\n\t\tswitch (type) {\n\t\t\tcase 'pre-spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.preSpiderfyTimerref) return;\n\t\t\t\tthis.preSpiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.preSpiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Delete static marker if already exists\n\t\t\t\t// (Happens when you click on a marker when another\n\t\t\t\t// marker is already spiderfied)\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\tthis.staticMarker = new google.maps.Marker({\n\t\t\t\t\tmap: map,\n\t\t\t\t\tposition: new google.maps.LatLng(markers[0].position.lat(), markers[0].position.lng()),\n\t\t\t\t\ticon: markers[0].iconZoomed,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.spiderfyTimerref) return;\n\t\t\t\tthis.spiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.spiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Change icon\n\t\t\t\tmarkers.forEach((e: any) => {\n\t\t\t\t\te.setIcon(e.iconSpiderfied);\n\t\t\t\t});\n\n\t\t\t\t// // Center\n\t\t\t\t// this.boundsBeforeSpiderfy = this.bounds;\n\t\t\t\t// this.centerMap(map, markers);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unspiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.unspiderfyTimerref) return;\n\t\t\t\tthis.unspiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.unspiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Remove static marker\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\t// Change icon\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst zoomed = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\t\t\t\t\tmarkers.forEach((e) => {\n\t\t\t\t\t\te.setIcon(zoomed ? e.iconZoomed : e.iconDefault);\n\t\t\t\t\t});\n\t\t\t\t}, 1);\n\n\t\t\t\t// // Center\n\t\t\t\t// this.bounds = this.boundsBeforeSpiderfy;\n\t\t\t\t// map.fitBounds(this.bounds);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tcenterMap(map: any, markers: any) {\n\t\tthis.bounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\t\t} else {\n\t\t\tmarkers.forEach((marker: any) => {\n\t\t\t\tconst latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());\n\t\t\t\tthis.bounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t\t// fit to bounds\n\t\tmap.fitBounds(this.bounds);\n\n\t\t// zoom out if greater than threshold\n\t\tsetTimeout((_) => {\n\t\t\tmap.getZoom() <= this._mapConfig.zoomLevelToChangeIcon ? null : map.setZoom(this._mapConfig.zoomLevelToChangeIcon);\n\t\t}, 1);\n\t}\n\n\tlistenToZoomChange(map: any) {\n\t\tgoogle.maps.event.addListener(map, 'zoom_changed', () => {\n\t\t\tthis.updateMapIcon(map);\n\t\t});\n\t}\n\n\tlistenToMarkerHover(marker: any) {\n\t\tconst mouseover = marker.addListener('mouseover', (e: any) => {\n\t\t\tconst index = this._markers.findIndex((marker) => {\n\t\t\t\treturn +marker.lat === +e.latLng.lat() && +marker.lng === +e.latLng.lng();\n\t\t\t});\n\t\t\t// console.log(\n\t\t\t//   'Mousein',\n\t\t\t//   e.latLng.lat(),\n\t\t\t//   e.latLng.lng(),\n\t\t\t//   this._markers,\n\t\t\t//   index,\n\t\t\t// );\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.showDialog.emit({\n\t\t\t\t\tmarker: this._markers[index],\n\t\t\t\t\tevent: e.domEvent,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst mouseout = marker.addListener('mouseout', (e: any) => {\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.hideDialog.emit(e.domEvent);\n\t\t\t});\n\t\t});\n\n\t\tthis.map.markerListeners.push({\n\t\t\tmouseover,\n\t\t\tmouseout,\n\t\t});\n\t}\n\n\t// unlistenToMarkerClick(_markers) {\n\t//   google.maps.event.clearListeners(marker, 'click', () => {\n\t//   });\n\t// }\n\n\tupdateMapIcon(map) {\n\t\tif (!this.map || !this.map.markers || !this.map.markers.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevZoomLevel = this.zoomLevel;\n\t\tthis.zoomLevel = this.map.getZoom();\n\t\tconst showZoomedIcon = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\n\t\t// Do not update icon if zoom threshold boundary is not crossed\n\t\tif (\n\t\t\t(prevZoomLevel < this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon) ||\n\t\t\t(prevZoomLevel >= this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel >= this._mapConfig.zoomLevelToChangeIcon)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (showZoomedIcon) {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconZoomed);\n\t\t\t});\n\t\t} else {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconDefault);\n\t\t\t});\n\t\t}\n\t}\n\n\tfilterMarkers(markers: any, bounds: any): any {\n\t\tconst filteredMarkers = markers.filter((marker) => {\n\t\t\tconst latS = Math.min(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst latE = Math.max(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst lngS = Math.min(+bounds.start.lng, +bounds.end.lng);\n\t\t\tconst lngE = Math.max(+bounds.start.lng, +bounds.end.lng);\n\n\t\t\tif (+marker.lat >= latS && +marker.lat <= latE && +marker.lng >= lngS && +marker.lng <= lngE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn filteredMarkers;\n\t}\n}\n",
            "properties": [
                {
                    "name": "bounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMapBound",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "centerOnBounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "centerOnMapUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "filterMarkersOutsideBounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "iconAnchorX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "iconAnchorY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "iconDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "iconSpiderfied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "iconZoomed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showMesh",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "zoomLevelToChangeIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMapMarker",
            "id": "interface-IMapMarker-053f7dbad5c9e1e3e05e6baf1d1f58e2cf126f2c911f1d2a1d90e0e937a207dd9e5e87866b4422bed62ef25f111d3f84e042435fe3ce1c1dad0c716e61f56e51",
            "file": "src/app/telco-maps/telco-maps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';\nimport mapIcons from './map-icons';\ndeclare let OverlappingMarkerSpiderfier: any;\ndeclare let MarkerClusterer: any;\n\nexport interface IMap {\n\tconfig?: IMapConfig;\n\tmarkers: IMapMarkers;\n}\n\nexport interface IMapConfig {\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n\ticonColor?: string;\n\ticonAnchorX?: number;\n\ticonAnchorY?: number;\n\tzoomLevelToChangeIcon?: number;\n\tcenterOnMapUpdate?: boolean;\n\tcenterOnBounds?: boolean;\n\tshowMesh?: boolean;\n\tbounds?: IMapBound;\n\tfilterMarkersOutsideBounds?: boolean;\n}\n\nexport interface IMapBound {\n\tstart: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n\tend: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n}\n\nexport type IMapMarkers = Array<IMapMarker>;\nexport interface IMapMarker {\n\tid: string;\n\tlat: string;\n\tlng: string;\n\ttitle: string;\n\tlabel: string;\n\tlink: string;\n\tmesh?: Array<string>;\n\tcolor?: string;\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n}\n\n@Component({\n\tselector: 'app-telco-maps',\n\ttemplateUrl: './telco-maps.component.html',\n\tstyleUrls: ['./telco-maps.component.scss'],\n})\nexport class TelcoMapsComponent implements AfterViewInit {\n\tmap: any;\n\toms: any;\n\tiw: any;\n\tbounds: any;\n\tzoomLevel = 1;\n\t_markers!: IMapMarkers;\n\tmarkersHash = {};\n\tmesh: any;\n\t_mapConfig: IMapConfig;\n\t_mapDefaultConfig: IMapConfig = {\n\t\ticonDefault: 'SITE',\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\n\t\ticonColor: '#E04B4B',\n\t\ticonAnchorX: 31,\n\t\ticonAnchorY: -33,\n\t\tzoomLevelToChangeIcon: 14,\n\t\tcenterOnMapUpdate: true,\n\t\tcenterOnBounds: true,\n\t\tshowMesh: true,\n\t\tfilterMarkersOutsideBounds: false,\n\t};\n\tstaticMarker: any;\n\tviewInit = false;\n\tboundsBeforeSpiderfy: any;\n\tpreSpiderfyTimerref: any;\n\tspiderfyTimerref: any;\n\tunspiderfyTimerref: any;\n\n\tneId = 'ne_135';\n\tticketid = 'ticket-123';\n\tdata2: any = [\n\t\t{\n\t\t\ttitle: 'CE-id-123',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t];\n\n\t@ViewChild('map') mapElement;\n\t@HostListener('window:resize', ['$event'])\n\tonResize() {\n\t\tthis.centerMap(this.map, this.map.markers);\n\t}\n\n\t@Input() set config(value: IMapConfig) {\n\t\tthis._mapConfig = { ...this._mapDefaultConfig, ...value };\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\t@Input() set markers(value: IMapMarkers) {\n\t\tlet filteredMarkers = value;\n\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\tfilteredMarkers = this.filterMarkers(value, this._mapConfig.bounds);\n\t\t}\n\t\tthis._markers = filteredMarkers;\n\t\t// console.log(this._markers);\n\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\n\t@Output() showDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\t@Output() hideDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\tconstructor(private zone: NgZone) {}\n\n\tngAfterViewInit() {\n\t\tif (!(this._markers && this._markers.length > 0)) {\n\t\t\tthis.oneTimeSetup();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.oneTimeSetup();\n\n\t\tthis.resetMarkers();\n\n\t\tthis.viewInit = true;\n\t}\n\n\toneTimeSetup() {\n\t\t// Load map\n\t\tconst mapProperties = {\n\t\t\tcenter: new google.maps.LatLng(0, 0),\n\t\t\tzoom: 10,\n\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t\tfullscreenControl: false,\n\t\t\t// restriction: {\n\t\t\t//   latLngBounds: latLngBounds,\n\t\t\t//   strictBounds: false,\n\t\t\t// },\n\t\t};\n\n\t\tconst latLngBounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig && this._mapConfig.bounds) {\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\n\t\t\tmapProperties['restriction'] = {\n\t\t\t\tlatLngBounds: latLngBounds,\n\t\t\t\tstrictBounds: false,\n\t\t\t};\n\t\t}\n\n\t\t// HTML canvas keeps misfiring ApplicationRef.tick()\n\t\t// To prevent that, initialize canvas outside angular\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map = new google.maps.Map(this.mapElement.nativeElement, mapProperties);\n\t\t});\n\n\t\tif (this._mapConfig && this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.map.fitBounds(latLngBounds);\n\t\t}\n\n\t\t// Add markers array\n\t\tthis.map.markers = [];\n\n\t\t// Add marker listener array\n\t\tthis.map.markerListeners = [];\n\n\t\t// Add mesh array\n\t\tthis.map.mesh = [];\n\n\t\t// Add cluster object\n\t\tthis.map.markerCluster = null;\n\n\t\t// // Create spiderfier instance\n\t\t// const options = {\n\t\t//   keepSpiderfied: true, // will keep spider chart open after clicking on a marker to show Infowindow\n\t\t//   markersWontMove: true, // we promise not to move any markers, allowing optimizations\n\t\t//   markersWontHide: true, // we promise not to change visibility of any markers, allowing optimizations\n\t\t//   basicFormatEvents: true, // allow the library to skip calculating advanced formatting information\n\t\t//   minZoomLevel: this._mapConfig.zoomLevelToChangeIcon, // minimum zoom level at which cluster will spiderfy\n\t\t// };\n\t\t// this.oms = new OverlappingMarkerSpiderfier(this.map, options);\n\n\t\t// // Add info window\n\t\t// this.iw = new google.maps.InfoWindow();\n\n\t\t// Attach zoom change listener\n\t\tthis.listenToZoomChange(this.map);\n\t}\n\n\tresetMarkers() {\n\t\t// If markers already exist, remove them before plotting new ones\n\t\tif (this.map && this.map.markers && this.map.markers.length > 0) {\n\t\t\t// this.oms.removeAllMarkers();\n\t\t\tthis.map.markerCluster.clearMarkers();\n\n\t\t\tthis.map.mesh.forEach((e: any) => {\n\t\t\t\tthis.removeLine(e);\n\t\t\t});\n\t\t\tthis.map.markerListeners.forEach((e: any) => {\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseover);\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseout);\n\t\t\t});\n\t\t\tthis.map.markers = [];\n\t\t\tthis.map.markerListeners = [];\n\t\t\tthis.map.mesh = [];\n\t\t\tthis.markersHash = {};\n\t\t}\n\n\t\t// If exists, add markers\n\t\tif (this._markers && this._markers.length > 0) {\n\t\t\t// Filter markers on map bounds\n\t\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\t\tthis._markers = this.filterMarkers(this._markers, this._mapConfig.bounds);\n\t\t\t}\n\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tthis.addMarker(e, this.map, this.oms, this.iw, this.map.markers);\n\t\t\t});\n\t\t}\n\n\t\t// Create marker cluster\n\t\tconst mcOptions = {\n\t\t\tstyles: [\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t],\n\t\t\t// styles: [\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 53,\n\t\t\t//     url: 'assets/images/map-markers/m1.png',\n\t\t\t//     width: 53,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 56,\n\t\t\t//     url: 'assets/images/map-markers/m2.png',\n\t\t\t//     width: 56,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 66,\n\t\t\t//     url: 'assets/images/map-markers/m3.png',\n\t\t\t//     width: 66,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 78,\n\t\t\t//     url: 'assets/images/map-markers/m4.png',\n\t\t\t//     width: 78,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 90,\n\t\t\t//     url: 'assets/images/map-markers/m5.png',\n\t\t\t//     width: 90,\n\t\t\t//   },\n\t\t\t// ],\n\t\t};\n\t\tthis.map.markerCluster = new MarkerClusterer(this.map, this.map.markers, mcOptions);\n\n\t\t// If mesh enabled, add mesh\n\t\tif (this._mapConfig.showMesh) {\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tif (e.mesh && e.mesh.length > 0) {\n\t\t\t\t\te.mesh.forEach((m) => {\n\t\t\t\t\t\tthis.addLine(this.map, e.id, m);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Center\n\t\tif (this._mapConfig.centerOnMapUpdate) {\n\t\t\tthis.centerMap(this.map, this.map.markers);\n\t\t}\n\t\t// else {\n\t\t//   // fit to bounds\n\t\t//   this.map.fitBounds(this.bounds);\n\t\t// }\n\t}\n\n\taddMarker(marker: any, map: any, oms = this.oms, iw: google.maps.InfoWindow = this.iw, markers: Array<google.maps.Marker>) {\n\t\tconst mapMarker = this.getMapMarker(map, marker);\n\n\t\tmarkers.push(mapMarker);\n\n\t\t// Attach marker hover listener\n\t\tthis.listenToMarkerHover(mapMarker);\n\n\t\tthis.markersHash[marker.id] = { lat: marker.lat, lng: marker.lng };\n\n\t\t// oms.trackMarker(mapMarker);\n\n\t\t// oms.addListener('click', function (mapMarker, event: Event) {\n\t\t//   iw.setContent(mapMarker.description);\n\t\t//   iw.open(map, mapMarker);\n\t\t// });\n\n\t\t// oms.addListener('pre-spiderfy', (marker: Element) => {\n\t\t//   this.onSpiderfierEvent(this.map, [marker], 'pre-spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('spiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('unspiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'unspiderfy');\n\t\t// });\n\t}\n\n\taddLine(map: any, sourceId: string, destinationId: string) {\n\t\tconst sMarker = this.markersHash[sourceId];\n\t\tconst dMarker = this.markersHash[destinationId];\n\t\tif (!sMarker || !dMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst source = new google.maps.LatLng(sMarker.lat, sMarker.lng);\n\t\tconst destination = new google.maps.LatLng(dMarker.lat, dMarker.lng);\n\n\t\tconst line = new google.maps.Polyline({\n\t\t\tmap: map,\n\t\t\tpath: [source, destination],\n\t\t\tstrokeColor: '#444',\n\t\t\tstrokeWeight: 1.5,\n\t\t\tzIndex: +google.maps.Marker.MAX_ZINDEX + 1,\n\t\t});\n\n\t\tmap.mesh.push(line);\n\t}\n\n\tremoveLine(line) {\n\t\tline.setMap(null);\n\t}\n\n\tgetMapMarker(map, marker) {\n\t\tconst locationAddressLatLng = new google.maps.LatLng(marker.lat, marker.lng);\n\t\t// const infoContent =\n\t\t//   '<div class=\"locationInfo\">' +\n\t\t//   '<div><strong>' +\n\t\t//   marker.title +\n\t\t//   '</strong></div>' +\n\t\t//   '<div>' +\n\t\t//   marker.label +\n\t\t//   '</div>' +\n\t\t//   '<a href=\"' +\n\t\t//   marker.link +\n\t\t//   '\">Se profil</a></div>';\n\n\t\t// const infoContent = this.getinfoContent();\n\n\t\tconst iconDefault = this.getMapMarkerIcon(marker, marker.iconDefault ? marker.iconDefault : this._mapConfig.iconDefault);\n\t\tconst iconZoomed = this.getMapMarkerIcon(marker, marker.iconZoomed ? marker.iconZoomed : this._mapConfig.iconZoomed);\n\t\tconst iconSpiderfied = this.getMapMarkerIcon(marker, marker.iconSpiderfied ? marker.iconSpiderfied : this._mapConfig.iconSpiderfied);\n\n\t\tconst mapMarker = new google.maps.Marker({\n\t\t\tmap: map,\n\t\t\tposition: locationAddressLatLng,\n\t\t\ticon: map.getZoom() < this._mapConfig.zoomLevelToChangeIcon ? iconDefault : iconZoomed,\n\t\t});\n\t\t// mapMarker.set('description', infoContent);\n\t\tmapMarker.set('iconDefault', iconDefault);\n\t\tmapMarker.set('iconZoomed', iconZoomed);\n\t\tmapMarker.set('iconSpiderfied', iconSpiderfied);\n\n\t\treturn mapMarker;\n\t}\n\n\tgetinfoContent() {\n\t\tconst htmlStr =\n\t\t\t`<div id=\"map-content-box\">\n      <div class=\"header-wrapper\">\n        <div class=\"left-box\">\n          <div class=\"line1\">\n            <p id=\"pid\">` +\n\t\t\tthis.neId +\n\t\t\t`</p>\n      </div>\n      <div class=\"line2\">\n        <p id=\"pid\" class=\" opacity50 margin10\"> Alarms:` +\n\t\t\t300 +\n\t\t\t`</p>\n      <p id=\"pid\" class=\"opacity50\">Ticket:` +\n\t\t\t200 +\n\t\t\t`</p>\n      </div>\n    </div>\n    <div class=\"right-box\">\n      <div class=\"icon-box margin10 \"></div>\n      <div class=\"icon-box\"></div>\n    </div>\n  </div>\n  <div class=\"body-wrapper\">` +\n\t\t\tthis.generateLayout() +\n\t\t\t`  </div>\n      </div>\n      `;\n\n\t\treturn htmlStr;\n\t}\n\n\tgenerateLayout() {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < this.data2.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t` <div class=\"row\">\n        <div class=\"body-row\">\n          <p id=\"pid\" class=\"text\">` +\n\t\t\t\tthis.data2[i].title +\n\t\t\t\t`</p>\n        </div>\n        <div class=\"right-box\">` +\n\t\t\t\tthis.getActions(this.data2[i].actions) +\n\t\t\t\t`</div>\n        </div>`;\n\t\t}\n\t\treturn str;\n\t}\n\n\tgetActions(data) {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < data.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t`<div class=\"icon-box margin10\">\n        ` + `</div>`;\n\t\t\treturn str;\n\t\t}\n\t}\n\n\tgetMapMarkerIcon(marker: any, icon: any) {\n\t\t// var iconDot = {\n\t\t//   path: 'M-3,0a3,3 0 1,0 6,0a3,3 0 1,0 -6,0',\n\t\t//   fillColor: 'red',\n\t\t//   fillOpacity: 1,\n\t\t//   strokeColor: 'transparent',\n\t\t//   anchor: new google.maps.Point(0, 0),\n\t\t// };\n\n\t\treturn {\n\t\t\tpath: mapIcons.markers[icon.toUpperCase()],\n\t\t\tfillColor: marker.color ? marker.color : this._mapConfig.iconColor,\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeColor: 'transparent',\n\t\t\tanchor: new google.maps.Point(this._mapConfig.iconAnchorX, this._mapConfig.iconAnchorY),\n\t\t\tscale: 1,\n\t\t};\n\t}\n\n\t// removeMarker(marker) {\n\t//   this.oms.removeMarker(marker);\n\t// }\n\n\t// removeAllMarkers() {\n\t//   this.oms.removeAllMarkers();\n\t// }\n\n\tonSpiderfierEvent(map: any, markers: any, type: string) {\n\t\tswitch (type) {\n\t\t\tcase 'pre-spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.preSpiderfyTimerref) return;\n\t\t\t\tthis.preSpiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.preSpiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Delete static marker if already exists\n\t\t\t\t// (Happens when you click on a marker when another\n\t\t\t\t// marker is already spiderfied)\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\tthis.staticMarker = new google.maps.Marker({\n\t\t\t\t\tmap: map,\n\t\t\t\t\tposition: new google.maps.LatLng(markers[0].position.lat(), markers[0].position.lng()),\n\t\t\t\t\ticon: markers[0].iconZoomed,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.spiderfyTimerref) return;\n\t\t\t\tthis.spiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.spiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Change icon\n\t\t\t\tmarkers.forEach((e: any) => {\n\t\t\t\t\te.setIcon(e.iconSpiderfied);\n\t\t\t\t});\n\n\t\t\t\t// // Center\n\t\t\t\t// this.boundsBeforeSpiderfy = this.bounds;\n\t\t\t\t// this.centerMap(map, markers);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unspiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.unspiderfyTimerref) return;\n\t\t\t\tthis.unspiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.unspiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Remove static marker\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\t// Change icon\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst zoomed = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\t\t\t\t\tmarkers.forEach((e) => {\n\t\t\t\t\t\te.setIcon(zoomed ? e.iconZoomed : e.iconDefault);\n\t\t\t\t\t});\n\t\t\t\t}, 1);\n\n\t\t\t\t// // Center\n\t\t\t\t// this.bounds = this.boundsBeforeSpiderfy;\n\t\t\t\t// map.fitBounds(this.bounds);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tcenterMap(map: any, markers: any) {\n\t\tthis.bounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\t\t} else {\n\t\t\tmarkers.forEach((marker: any) => {\n\t\t\t\tconst latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());\n\t\t\t\tthis.bounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t\t// fit to bounds\n\t\tmap.fitBounds(this.bounds);\n\n\t\t// zoom out if greater than threshold\n\t\tsetTimeout((_) => {\n\t\t\tmap.getZoom() <= this._mapConfig.zoomLevelToChangeIcon ? null : map.setZoom(this._mapConfig.zoomLevelToChangeIcon);\n\t\t}, 1);\n\t}\n\n\tlistenToZoomChange(map: any) {\n\t\tgoogle.maps.event.addListener(map, 'zoom_changed', () => {\n\t\t\tthis.updateMapIcon(map);\n\t\t});\n\t}\n\n\tlistenToMarkerHover(marker: any) {\n\t\tconst mouseover = marker.addListener('mouseover', (e: any) => {\n\t\t\tconst index = this._markers.findIndex((marker) => {\n\t\t\t\treturn +marker.lat === +e.latLng.lat() && +marker.lng === +e.latLng.lng();\n\t\t\t});\n\t\t\t// console.log(\n\t\t\t//   'Mousein',\n\t\t\t//   e.latLng.lat(),\n\t\t\t//   e.latLng.lng(),\n\t\t\t//   this._markers,\n\t\t\t//   index,\n\t\t\t// );\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.showDialog.emit({\n\t\t\t\t\tmarker: this._markers[index],\n\t\t\t\t\tevent: e.domEvent,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst mouseout = marker.addListener('mouseout', (e: any) => {\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.hideDialog.emit(e.domEvent);\n\t\t\t});\n\t\t});\n\n\t\tthis.map.markerListeners.push({\n\t\t\tmouseover,\n\t\t\tmouseout,\n\t\t});\n\t}\n\n\t// unlistenToMarkerClick(_markers) {\n\t//   google.maps.event.clearListeners(marker, 'click', () => {\n\t//   });\n\t// }\n\n\tupdateMapIcon(map) {\n\t\tif (!this.map || !this.map.markers || !this.map.markers.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevZoomLevel = this.zoomLevel;\n\t\tthis.zoomLevel = this.map.getZoom();\n\t\tconst showZoomedIcon = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\n\t\t// Do not update icon if zoom threshold boundary is not crossed\n\t\tif (\n\t\t\t(prevZoomLevel < this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon) ||\n\t\t\t(prevZoomLevel >= this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel >= this._mapConfig.zoomLevelToChangeIcon)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (showZoomedIcon) {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconZoomed);\n\t\t\t});\n\t\t} else {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconDefault);\n\t\t\t});\n\t\t}\n\t}\n\n\tfilterMarkers(markers: any, bounds: any): any {\n\t\tconst filteredMarkers = markers.filter((marker) => {\n\t\t\tconst latS = Math.min(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst latE = Math.max(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst lngS = Math.min(+bounds.start.lng, +bounds.end.lng);\n\t\t\tconst lngE = Math.max(+bounds.start.lng, +bounds.end.lng);\n\n\t\t\tif (+marker.lat >= latS && +marker.lat <= latE && +marker.lng >= lngS && +marker.lng <= lngE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn filteredMarkers;\n\t}\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "iconDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "iconSpiderfied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "iconZoomed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "lng",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "mesh",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "InputDataInterFace",
            "id": "interface-InputDataInterFace-cd5debf7bcb4985a21a87a69212fc04e60906cef1904830d700ad9660d208f7eec4acd9dba2c35193c636d879931079fb37eb55c666b8c08c89b4b6251ee7ee4",
            "file": "src/app/telco-table/telco-table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort, Sort } from '@angular/material/sort';\n\nexport interface InputDataInterFace {\n\tSiteName: string;\n\tCountofAlarm: string;\n\tTimestamp: { date: string; time: string };\n\tRCA: { iconImg: string; status: string };\n}\n\nconst ELEMENT_DATA: InputDataInterFace[] = [\n\t{\n\t\tSiteName: 'Site Name 1',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2022',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 2',\n\t\tCountofAlarm: '09',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'Cell Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 4',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 5',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 6',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 7',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n];\n\n@Component({\n\tselector: 'app-telco-table',\n\ttemplateUrl: './telco-table.component.html',\n\tstyleUrls: ['./telco-table.component.scss'],\n})\nexport class TelcoTableComponent implements OnInit {\n\t@Input() PaginationShow: boolean = false;\n\tdisplayedColumns = ['SiteName', 'CountofAlarm', 'Timestamp', 'RCA'];\n\tdataSource = new MatTableDataSource<InputDataInterFace>(ELEMENT_DATA);\n\n\t@ViewChild(MatSort) sort: MatSort;\n\t@ViewChild(MatPaginator) paginator: MatPaginator;\n\n\tconstructor(private _liveAnnouncer: LiveAnnouncer) {}\n\n\tngOnInit() {\n\t\tthis.dataSource.paginator = this.paginator;\n\t\tthis.dataSource.sort = this.sort;\n\t\tthis.dataSource.sortingDataAccessor = (item, property) => {\n\t\t\tswitch (property) {\n\t\t\t\tcase 'RCA': {\n\t\t\t\t\treturn item.RCA.status;\n\t\t\t\t}\n\n\t\t\t\tcase 'Timestamp': {\n\t\t\t\t\tlet newDate = new Date(item.Timestamp.date);\n\t\t\t\t\treturn newDate;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn item[property];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// for sorting\n\tannounceSortChange(sortState: Sort) {\n\t\tif (sortState.direction) {\n\t\t\tthis._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\n\t\t} else {\n\t\t\tthis._liveAnnouncer.announce('Sorting cleared');\n\t\t}\n\t}\n}\n",
            "properties": [
                {
                    "name": "CountofAlarm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "RCA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "SiteName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "mapIcons",
            "id": "class-mapIcons-22c0d490a354c1e6edd6f61c882b7c003c8ca9b90dd8697b2a5b6ab8cc54a8664d30e411e489f2ccb478910531c1e0e00d5c3b7ff4fa1ebc60103af426a41cce",
            "file": "src/app/telco-maps/map-icons.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class mapIcons {\n  markers: any = {\n    SITE: 'M 4, 11 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0',\n    SITE_ACTIVE:\n      'M155,90 C161.627417,90 167,95.372583 167,102 C167,108.627417 161.627417,114 155,114 C148.372583,114 143,108.627417 143,102 C143,95.372583 148.372583,90 155,90 Z M155.126316,92.2736842 C149.684858,92.2736842 145.273684,96.6848576 145.273684,102.126316 C145.273684,107.567774 149.684858,111.978947 155.126316,111.978947 C160.567774,111.978947 164.978947,107.567774 164.978947,102.126316 C164.978947,96.6848576 160.567774,92.2736842 155.126316,92.2736842 Z M155.126316,95.3052632 C158.893479,95.3052632 161.947368,98.3591524 161.947368,102.126316 C161.947368,105.893479 158.893479,108.947368 155.126316,108.947368 C151.359152,108.947368 148.305263,105.893479 148.305263,102.126316 C148.305263,98.3591524 151.359152,95.3052632 155.126316,95.3052632 Z',\n    SITE_ZOOMED_ALT:\n      'M19.644 24.168C19.156 26.35 17.035 28 14.5 28s-4.656-1.65-5.143-3.832h10.287zM15.9 0c4.74.623 8.4 4.344 8.4 8.84v3.56c0 2.529 1.214 4.915 3.33 6.547.558.436.87 1.054.87 1.708 0 1.233-1.099 2.236-2.45 2.236H2.95C1.6 22.89.5 21.888.5 20.655c0-.654.312-1.272.857-1.698C3.487 17.315 4.7 14.93 4.7 12.401V8.839C4.7 4.344 8.358.623 13.1 0h2.8z',\n    // 'M16.0415007,19.9890404 C15.6586101,21.7042068 13.992099,23 12.0001007,23 C10.007901,23 8.34138998,21.7042068 7.95870067,19.9890404 L7.95870067,19.9890404 Z M13.1000302,1 C16.8246038,1.48975874 19.7000101,4.41342558 19.7000101,7.94520182 L19.7000101,7.94520182 L19.7000101,10.7433507 C19.7000101,12.7295843 20.653712,14.6044507 22.3170004,15.8871959 C22.7546761,16.2293839 23,16.7150996 23,17.2289328 C23,18.1976076 22.1365322,18.9854484 21.075073,18.9854484 L21.075073,18.9854484 L2.92512843,18.9854484 C1.86346784,18.9854484 1,18.1976076 1,17.2289328 C1,16.7150996 1.24532398,16.2293839 1.6733317,15.8950982 C3.34628804,14.6044507 4.29998993,12.7295843 4.29998993,10.7433507 L4.29998993,10.7433507 L4.29998993,7.94520182 C4.29998993,4.41342558 7.17438913,1.48975874 10.8999698,1 L10.8999698,1 Z',\n    SITE_ZOOMED: 'M 0, 11 a 11,11 0 1,0 22,0 a 11,11 0 1,0 -22,0',\n    NETWORK_ELEMENT:\n      'M17.2301946,0.366381323 C17.6684825,-0.0719066148 18.3259144,-0.0719066148 18.7642023,0.366381323 C23.0375097,5.07797665 23.0375097,12.6384436 18.7642023,17.2404669 C18.3259144,17.7883268 17.5589105,17.7883268 17.2301946,17.2404669 C16.7919066,16.802179 16.7919066,16.0351751 17.2301946,15.5968872 C20.6269261,11.8714397 20.6269261,5.84498054 17.2301946,2.00996109 C16.7919066,1.57167315 16.7919066,0.804669261 17.2301946,0.366381323 Z M3.20498054,0.366381323 C3.64326848,-0.0719066148 4.30070039,-0.0719066148 4.73898833,0.366381323 C5.17727626,0.804669261 5.17727626,1.57167315 4.73898833,2.00996109 C1.34225681,5.73540856 1.34225681,11.7618677 4.73898833,15.5968872 C5.17727626,16.0351751 5.17727626,16.802179 4.73898833,17.2404669 C4.41027237,17.7883268 3.64326848,17.7883268 3.20498054,17.2404669 C-1.06832685,12.6384436 -1.06832685,4.96840467 3.20498054,0.366381323 Z M14.052607,3.76311284 C14.4908949,3.3248249 15.1483268,3.3248249 15.5866148,3.76311284 C18.1067704,6.61198444 18.1067704,11.1044358 15.5866148,13.9533074 C15.2578988,14.3915953 14.4908949,14.3915953 14.052607,13.8437354 C13.6143191,13.4054475 13.6143191,12.6384436 14.052607,12.2001556 C15.8057588,10.3374319 15.8057588,7.26941634 14.052607,5.40669261 C13.6143191,4.96840467 13.6143191,4.20140078 14.052607,3.76311284 Z M6.38256809,3.65354086 C6.82085603,3.21525292 7.47828794,3.21525292 7.91657588,3.65354086 C8.35486381,4.09182879 8.35486381,4.85883268 7.91657588,5.29712062 C6.16342412,7.15984436 6.16342412,10.2278599 7.91657588,12.0905837 C8.35486381,12.5288716 8.35486381,13.2958755 7.91657588,13.7341634 C7.47828794,14.3915953 6.71128405,14.3915953 6.38256809,13.8437354 C3.86241245,10.9948638 3.86241245,6.50241245 6.38256809,3.65354086 Z M10.9845914,6.61198443 C12.1948901,6.61198443 13.1760311,7.5931254 13.1760311,8.80342412 C13.1760311,10.0137228 12.1948901,10.9948638 10.9845914,10.9948638 C9.77429268,10.9948638 8.79315171,10.0137228 8.79315171,8.80342412 C8.79315171,7.5931254 9.77429268,6.61198443 10.9845914,6.61198443 Z',\n  };\n}\n\nexport default new mapIcons();\n",
            "properties": [
                {
                    "name": "markers",
                    "defaultValue": "{\n    SITE: 'M 4, 11 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0',\n    SITE_ACTIVE:\n      'M155,90 C161.627417,90 167,95.372583 167,102 C167,108.627417 161.627417,114 155,114 C148.372583,114 143,108.627417 143,102 C143,95.372583 148.372583,90 155,90 Z M155.126316,92.2736842 C149.684858,92.2736842 145.273684,96.6848576 145.273684,102.126316 C145.273684,107.567774 149.684858,111.978947 155.126316,111.978947 C160.567774,111.978947 164.978947,107.567774 164.978947,102.126316 C164.978947,96.6848576 160.567774,92.2736842 155.126316,92.2736842 Z M155.126316,95.3052632 C158.893479,95.3052632 161.947368,98.3591524 161.947368,102.126316 C161.947368,105.893479 158.893479,108.947368 155.126316,108.947368 C151.359152,108.947368 148.305263,105.893479 148.305263,102.126316 C148.305263,98.3591524 151.359152,95.3052632 155.126316,95.3052632 Z',\n    SITE_ZOOMED_ALT:\n      'M19.644 24.168C19.156 26.35 17.035 28 14.5 28s-4.656-1.65-5.143-3.832h10.287zM15.9 0c4.74.623 8.4 4.344 8.4 8.84v3.56c0 2.529 1.214 4.915 3.33 6.547.558.436.87 1.054.87 1.708 0 1.233-1.099 2.236-2.45 2.236H2.95C1.6 22.89.5 21.888.5 20.655c0-.654.312-1.272.857-1.698C3.487 17.315 4.7 14.93 4.7 12.401V8.839C4.7 4.344 8.358.623 13.1 0h2.8z',\n    // 'M16.0415007,19.9890404 C15.6586101,21.7042068 13.992099,23 12.0001007,23 C10.007901,23 8.34138998,21.7042068 7.95870067,19.9890404 L7.95870067,19.9890404 Z M13.1000302,1 C16.8246038,1.48975874 19.7000101,4.41342558 19.7000101,7.94520182 L19.7000101,7.94520182 L19.7000101,10.7433507 C19.7000101,12.7295843 20.653712,14.6044507 22.3170004,15.8871959 C22.7546761,16.2293839 23,16.7150996 23,17.2289328 C23,18.1976076 22.1365322,18.9854484 21.075073,18.9854484 L21.075073,18.9854484 L2.92512843,18.9854484 C1.86346784,18.9854484 1,18.1976076 1,17.2289328 C1,16.7150996 1.24532398,16.2293839 1.6733317,15.8950982 C3.34628804,14.6044507 4.29998993,12.7295843 4.29998993,10.7433507 L4.29998993,10.7433507 L4.29998993,7.94520182 C4.29998993,4.41342558 7.17438913,1.48975874 10.8999698,1 L10.8999698,1 Z',\n    SITE_ZOOMED: 'M 0, 11 a 11,11 0 1,0 22,0 a 11,11 0 1,0 -22,0',\n    NETWORK_ELEMENT:\n      'M17.2301946,0.366381323 C17.6684825,-0.0719066148 18.3259144,-0.0719066148 18.7642023,0.366381323 C23.0375097,5.07797665 23.0375097,12.6384436 18.7642023,17.2404669 C18.3259144,17.7883268 17.5589105,17.7883268 17.2301946,17.2404669 C16.7919066,16.802179 16.7919066,16.0351751 17.2301946,15.5968872 C20.6269261,11.8714397 20.6269261,5.84498054 17.2301946,2.00996109 C16.7919066,1.57167315 16.7919066,0.804669261 17.2301946,0.366381323 Z M3.20498054,0.366381323 C3.64326848,-0.0719066148 4.30070039,-0.0719066148 4.73898833,0.366381323 C5.17727626,0.804669261 5.17727626,1.57167315 4.73898833,2.00996109 C1.34225681,5.73540856 1.34225681,11.7618677 4.73898833,15.5968872 C5.17727626,16.0351751 5.17727626,16.802179 4.73898833,17.2404669 C4.41027237,17.7883268 3.64326848,17.7883268 3.20498054,17.2404669 C-1.06832685,12.6384436 -1.06832685,4.96840467 3.20498054,0.366381323 Z M14.052607,3.76311284 C14.4908949,3.3248249 15.1483268,3.3248249 15.5866148,3.76311284 C18.1067704,6.61198444 18.1067704,11.1044358 15.5866148,13.9533074 C15.2578988,14.3915953 14.4908949,14.3915953 14.052607,13.8437354 C13.6143191,13.4054475 13.6143191,12.6384436 14.052607,12.2001556 C15.8057588,10.3374319 15.8057588,7.26941634 14.052607,5.40669261 C13.6143191,4.96840467 13.6143191,4.20140078 14.052607,3.76311284 Z M6.38256809,3.65354086 C6.82085603,3.21525292 7.47828794,3.21525292 7.91657588,3.65354086 C8.35486381,4.09182879 8.35486381,4.85883268 7.91657588,5.29712062 C6.16342412,7.15984436 6.16342412,10.2278599 7.91657588,12.0905837 C8.35486381,12.5288716 8.35486381,13.2958755 7.91657588,13.7341634 C7.47828794,14.3915953 6.71128405,14.3915953 6.38256809,13.8437354 C3.86241245,10.9948638 3.86241245,6.50241245 6.38256809,3.65354086 Z M10.9845914,6.61198443 C12.1948901,6.61198443 13.1760311,7.5931254 13.1760311,8.80342412 C13.1760311,10.0137228 12.1948901,10.9948638 10.9845914,10.9948638 C9.77429268,10.9948638 8.79315171,10.0137228 8.79315171,8.80342412 C8.79315171,7.5931254 9.77429268,6.61198443 10.9845914,6.61198443 Z',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-70caa7971187ea42adc33d479aee19909f306fbac090cda703725407947453107c36bc35e922e56b12fbad3b5667e7603883c2854df494d5723ff04ebabfaf23",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'telco-web-components'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'telco-web-components';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-f0eed6ed4dc9ff9a839f60cd262fa8579c6e7480a48d1ebb8502f004fb80eef5ce89bb16ff3a7c795ac7c1fe98b62de7d0ac23d97b995256aa33fc146e3b15d3",
            "file": "src/app/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "telco-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'#660099'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonFontSize",
                    "defaultValue": "'1.5rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonHeight",
                    "defaultValue": "'3rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "displayIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconLink",
                    "defaultValue": "'home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "roundedButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Primary Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "buttonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\n@Component({\r\n\tselector: 'telco-button',\r\n\ttemplateUrl: './button.component.html',\r\n\tstyleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent {\r\n\t@Input() title: string = 'Primary Button';\r\n\t@Input() backgroundColor: string = '#660099';\r\n\t@Input() displayIcon: boolean = false;\r\n\t@Input() roundedButton: boolean = true;\r\n\t@Input() iconLink: string = 'home';\r\n\t@Input() iconRight: boolean = false;\r\n\t@Input() buttonFontSize: string = '1.5rem';\r\n\t@Input() buttonHeight: string = '3rem';\r\n\t@Input() textColor: string = 'white';\r\n\r\n\t@Output() buttonClick = new EventEmitter<any>();\r\n\tbuttonClicked() {\r\n\t\tthis.buttonClick.emit();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n\twidth: 100%;\r\n\ttext-align: center;\r\n\tfont-size: 1rem;\r\n}\r\n\r\n.rounded {\r\n\tborder-radius: 2rem;\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\r\n<button [ngStyle]=\"{\r\n\t\t'background-color': backgroundColor,\r\n    'color':textColor,\r\n    'height':buttonHeight\r\n\t}\"\r\n  [ngClass]=\"{\r\n\t\trounded: roundedButton\r\n\t}\"\r\n\r\nfxLayout=\"{{!iconRight ? 'row' : 'row-reverse'}}\"  fxLayoutAlign=\"center center\" fxLayoutGap=\"1rem\" (click)=\"buttonClicked()\">\r\n  <mat-icon *ngIf=\"displayIcon\" >{{iconLink}}</mat-icon>\r\n  <p [ngStyle]=\"{ 'font-size': buttonFontSize }\">{{title}}</p>\r\n</button>\r\n"
        },
        {
            "name": "TelcoBarChartComponent",
            "id": "component-TelcoBarChartComponent-8e4cfdd46d40bb485a09c07abf9291fd7191b1352b45131bc492efdd1780abdce9c6192ff06452298d6e4f8aa869767f6d7f0b19777720d44209c216701c5c45",
            "file": "src/app/telco-charts/telco-bar-chart/telco-bar-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-bar-chart",
            "styleUrls": [
                "./telco-bar-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-bar-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "barChartData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { PlotlyModule } from 'angular-plotly.js';\nimport * as PlotlyJS from 'plotly.js-dist-min';\n\nPlotlyModule.plotlyjs = PlotlyJS;\n\n@Component({\n\tselector: 'app-telco-bar-chart',\n\ttemplateUrl: './telco-bar-chart.component.html',\n\tstyleUrls: ['./telco-bar-chart.component.scss'],\n})\nexport class TelcoBarChartComponent implements OnInit {\n\t@Input() barChartData: any = {};\n\tconstructor() {}\n\n\tngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./telco-bar-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<plotly-plot [data]=\"barChartData.data\" [layout]=\"barChartData.layout\"></plotly-plot>\n"
        },
        {
            "name": "TelcoCardsComponent",
            "id": "component-TelcoCardsComponent-20fe95ddbbeb7a434cc11c58beddd175539b951e002006715b3d1e85b54b5304ff7f9af5caf4a31760deddc28f92218730427576cecbddb61fc56e100124991d",
            "file": "src/app/telco-cards/telco-cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-cards",
            "styleUrls": [
                "./telco-cards.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardIcon",
                    "defaultValue": "'../../assets/cards-icon/Social_notifications.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cardSubtitle",
                    "defaultValue": "'1390'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cardSubtitlePercentage",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "cardTitle",
                    "defaultValue": "'Total Alarm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "negativePercentageIcon",
                    "defaultValue": "'../../assets/cards-icon/red-arrow-up.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "positivePercentageIcon",
                    "defaultValue": "'../../assets/cards-icon/green-thumbs-up.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "viewAllClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "viewAllClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n\tselector: 'app-telco-cards',\n\ttemplateUrl: './telco-cards.component.html',\n\tstyleUrls: ['./telco-cards.component.scss'],\n})\nexport class TelcoCardsComponent {\n\t@Input() cardIcon: string = '../../assets/cards-icon/Social_notifications.svg';\n\t@Input() cardTitle: string = 'Total Alarm';\n\t@Input() cardSubtitle: string = '1390';\n\t@Input() cardSubtitlePercentage: number = 12;\n\t@Input() positivePercentageIcon: string = '../../assets/cards-icon/green-thumbs-up.svg';\n\t@Input() negativePercentageIcon: string = '../../assets/cards-icon/red-arrow-up.svg';\n\n\t@Output() viewAllClicked = new EventEmitter<any>();\n\n\tconstructor() {}\n\n\tviewAllClick() {\n\t\tthis.viewAllClicked.emit();\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "html {\r\n\tfont-size: 14px;\r\n\tfont-family: 'Noto Sans', sans-serif;\r\n\tfont-style: normal;\r\n}\r\np {\r\n\tmargin: 0;\r\n}\r\n\r\n.card {\r\n\tpadding: 1rem 1.5rem;\r\n\tbackground: #ffffff;\r\n\tborder: 1px solid #e2e7ef;\r\n\tborder-radius: 0.2rem;\r\n}\r\n\r\n.item-1-upper {\r\n\theight: fit-content;\r\n\tp {\r\n\t\tfont-size: 1rem;\r\n\t\tfont-weight: 400;\r\n\t\tcolor: #636a75;\r\n\t}\r\n}\r\n\r\n.lower-left {\r\n\tp {\r\n\t\tfont-weight: 700;\r\n\t\tfont-size: 1.5rem;\r\n\t\tcolor: #660099;\r\n\t}\r\n}\r\n\r\n.lower-right {\r\n\tbackground: #e0f2ee;\r\n\tborder-radius: 0.1rem;\r\n\theight: 1.8rem;\r\n\tp {\r\n\t\tfont-weight: 700;\r\n\t\tfont-size: 1rem;\r\n\t\ttext-align: center;\r\n\t\tcolor: #36947d;\r\n\t}\r\n}\r\n\r\n.red {\r\n\tbackground: rgba(225, 38, 38, 0.1);\r\n\tp {\r\n\t\tcolor: #e12626;\r\n\t}\r\n}\r\n\r\n.card-item-3 {\r\n\tmin-height: 54px;\r\n\tp {\r\n\t\tpadding: 0.2rem;\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 1rem;\r\n\t\ttext-align: center;\r\n\t\tcolor: #2f54eb;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./telco-cards.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "templateData": "<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"card\">\n\t<div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"start center\" class=\"card-items\">\n\t\t<div class=\"card-item-1\" fxFlex=\"20\" fxLayoutAlign=\"center center\">\n\t\t\t<img [src]=\"cardIcon\" alt=\"\" />\n\t\t</div>\n\n\t\t<div class=\"card-item-2\" fxFlex=\"48\" fxLayout=\"column\" fxLayoutGap=\"4px\">\n\t\t\t<div class=\"item-1-upper\" fxFlex=\"53\">\n\t\t\t\t<p>{{ cardTitle }}</p>\n\t\t\t</div>\n\n\t\t\t<div class=\"item-2-lower\" fxLayout=\"row\" fxLayoutGap=\"6px\" fxFlex=\"47\" fxLayoutAlign=\"start center\">\n\t\t\t\t<div fxFlex=\"46\" class=\"lower-left\" fxLayout=\"start center\">\n\t\t\t\t\t<p>{{ cardSubtitle }}</p>\n\t\t\t\t</div>\n\n\t\t\t\t<!-- if the given percentage is greater than 0 -->\n\t\t\t\t<div fxFlex=\"52\" class=\"lower-right\" fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\" *ngIf=\"cardSubtitlePercentage >= 0\">\n\t\t\t\t\t<p>{{ cardSubtitlePercentage }}%</p>\n\t\t\t\t\t<img [src]=\"positivePercentageIcon\" alt=\"\" />\n\t\t\t\t</div>\n\n\t\t\t\t<!-- if it is less than 0 -->\n\t\t\t\t<div fxFlex=\"52\" class=\"lower-right red\" fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\" *ngIf=\"cardSubtitlePercentage < 0\">\n\t\t\t\t\t<p>{{ cardSubtitlePercentage }}%</p>\n\t\t\t\t\t<img [src]=\"negativePercentageIcon\" alt=\"\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"card-item-3\" fxFlex=\"32\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n\t\t\t<p (click)=\"viewAllClick()\">View All</p>\n\t\t</div>\n\t</div>\n</div>\n"
        },
        {
            "name": "TelcoListComponent",
            "id": "component-TelcoListComponent-a6fe6c581e20703ff43aca38c2bbd706f1f58db9a4aa3c95da7c3822ee1b1d641e8b988f2e0f5be70e118eeb3d382617f72bb85bfb62a99e757fe58b86fafb1e",
            "file": "src/app/telco-list/telco-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-list",
            "styleUrls": [
                "./telco-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addTag",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bindLabel",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "bindLabelArray",
                    "defaultValue": "['name', 'value']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "customDropdownIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disableInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownlist",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "fontFamily",
                    "defaultValue": "'Noto Sans, sans-serif'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemsLimit",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "multiLabelBinding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiselect",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedDropdownlist",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "showCustomOption",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "withInitial",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "withLimitInitial",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "autocompleteChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "autocompleteOptionSelect",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "onAdd",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPasteSearchedItem",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSearch",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "searchedItem",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionSource",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentAction",
                    "defaultValue": "this.actionSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "insertSearchIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isPaste",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "bindCustomLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "customSearch",
                    "args": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAutoCompleteChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDropdownSearch",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPasteSearch",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n\tselector: 'app-telco-list',\n\ttemplateUrl: './telco-list.component.html',\n\tstyleUrls: ['./telco-list.component.scss'],\n})\nexport class TelcoListComponent {\n\t@Input() dropdownlist: any[] = [];\n\t@Input() multiselect = true;\n\t@Input() addTag = true;\n\t@Input() disableInput = false;\n\t@Input() selectedDropdownlist: any[] = [];\n\t@Input() showCustomOption = false;\n\t@Input() bindLabel: any = 'name';\n\t@Input() withInitial = false;\n\t@Input() itemsLimit = 1;\n\t@Input() multiLabelBinding = false;\n\t@Input() bindLabelArray: any = ['name', 'value'];\n\t@Input() placeholder = '';\n\t@Input() customDropdownIcon = false;\n\t@Input() withLimitInitial = false;\n\t@Input() fontFamily = 'Noto Sans, sans-serif';\n\n\t@Output() onAdd = new EventEmitter<any>();\n\t@Output() onRemove = new EventEmitter<any>();\n\t@Output() onChange = new EventEmitter<any>();\n\t@Output() onClear = new EventEmitter<any>();\n\t@Output() onSearch = new EventEmitter<any>();\n\t@Output() searchedItem = new EventEmitter<any>();\n\t@Output() onPasteSearchedItem = new EventEmitter<any>();\n\t@Output() autocompleteChange = new EventEmitter<any>();\n\t@Output() autocompleteOptionSelect = new EventEmitter<any>();\n\n\tinsertSearchIcon = '';\n\tsubscription: any;\n\tisPaste = false;\n\tprivate actionSource = new Subject<any>();\n\tcurrentAction = this.actionSource.asObservable();\n\n\tpublic get classes(): string[] {\n\t\treturn [this.withInitial ? 'with-initial' : ''];\n\t}\n\n\tngOnInit() {\n\t\tthis.subscription = this.currentAction.pipe(debounceTime(500)).subscribe((value: string) => {\n\t\t\tthis.searchedItem.emit(value);\n\t\t\tthis.onSearch.emit(value);\n\t\t});\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.subscription.unsubscribe();\n\t}\n\n\tngOnChanges() {\n\t\tthis.bindCustomLabel();\n\t\tswitch (this.bindLabelArray.length) {\n\t\t\tcase 1: {\n\t\t\t\tthis.bindLabelArray = [this.bindLabelArray[0], 'name', 'value'];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tthis.bindLabelArray = [this.bindLabelArray[0], this.bindLabelArray[1], 'value'];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.bindLabelArray = ['name', 'value', 'id'];\n\t\t}\n\t}\n\n\ttoggleDisabled() {\n\t\tconst item: any = this.dropdownlist[0];\n\t\titem.disabled = !item.disabled;\n\t}\n\n\tonAddValue(event: any) {\n\t\tthis.onAdd.emit(event);\n\t}\n\n\tonRemoveValue(event: any) {\n\t\tthis.onRemove.emit(event);\n\t}\n\n\tonChangeValue(event: any) {\n\t\tthis.onChange.emit(event);\n\t}\n\n\tonSearchValue(event: any) {\n\t\tif (!this.isPaste) {\n\t\t\tthis.onSearch.emit(event);\n\t\t} else {\n\t\t\tthis.isPaste = false;\n\t\t}\n\t}\n\n\tonPasteSearch(event: any) {\n\t\tthis.isPaste = true;\n\t\tthis.onPasteSearchedItem.emit(event.clipboardData.getData('Text'));\n\t\tsetTimeout(() => {\n\t\t\tevent.target.value = null;\n\t\t}, 0);\n\t}\n\n\tonDropdownSearch(event: any) {\n\t\tif (!this.isPaste) {\n\t\t\tthis.actionSource.next(event.term);\n\t\t} else {\n\t\t\tthis.isPaste = false;\n\t\t}\n\t}\n\n\tonAutoCompleteChange(event: any) {\n\t\tthis.autocompleteChange.emit(event);\n\t}\n\n\tonOptionSelected(event: any) {\n\t\tthis.bindCustomLabel();\n\t\tthis.autocompleteOptionSelect.emit(event);\n\t}\n\n\tbindCustomLabel() {\n\t\tif (this.multiLabelBinding && this.showCustomOption && this.bindLabelArray?.length > 0 && this.dropdownlist?.length > 0) {\n\t\t\tthis.dropdownlist = this.dropdownlist.map((bindLabelValue: any) => {\n\t\t\t\tbindLabelValue.bindLabel = '';\n\t\t\t\tbindLabelValue.bindLabel = this.bindLabelArray.map((element: any) => bindLabelValue[element]).join('');\n\t\t\t\treturn bindLabelValue;\n\t\t\t});\n\t\t}\n\t}\n\n\tcustomSearch(term: string, item: any) {\n\t\t// Creating and array of space saperated term and removing the empty values using filter\n\t\tconst terms: string[] = term.toLowerCase().split(' ').filter(Boolean);\n\t\tconst search = item.bindLabel ? item.bindLabel.toLowerCase() : '';\n\t\t// every term should be present in the search string\n\t\treturn terms.every((termValue: string) => search.indexOf(termValue) !== -1);\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .ng-select.ng-select-multiple .ng-select-container .ng-value-container {\r\n\tflex-flow: nowrap row !important;\r\n\t-webkit-flex-direction: row-reverse !important;\r\n\tflex-direction: row-reverse !important;\r\n}\r\n\r\n::ng-deep .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value {\r\n\tdisplay: flex;\r\n\tbackground: #e6e6e6;\r\n\tborder-radius: 4px;\r\n}\r\n\r\n::ng-deep .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right {\r\n\torder: 2;\r\n\tborder-left: 0;\r\n}\r\n\r\n::ng-deep .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right:hover {\r\n\tbackground: #e6e6e6;\r\n}\r\n\r\n::ng-deep .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-label {\r\n\torder: 1;\r\n\tpadding: 1px 3px;\r\n\tcolor: #000000;\r\n}\r\n\r\n::ng-deep .ng-select.insertSearchIcon.ng-select-multiple .ng-select-container .ng-arrow-wrapper .ng-arrow,\r\n::ng-deep .ng-select.insertSearchIcon.ng-select-single .ng-select-container .ng-arrow-wrapper .ng-arrow {\r\n\tborder-color: none;\r\n\tborder-style: none;\r\n\tborder-width: 0;\r\n}\r\n\r\n::ng-deep .ng-select.insertSearchIcon.ng-select-multiple .ng-select-container .ng-arrow-wrapper,\r\n::ng-deep .ng-select.insertSearchIcon.ng-select-single .ng-select-container .ng-arrow-wrapper {\r\n\tbackground-image: url('https://assets.dds.iata.org/assets/icons/SearchIcon.svg');\r\n\tbackground-repeat: no-repeat;\r\n\tbackground-size: 14px 14px;\r\n\tmargin-top: 6px;\r\n}\r\n\r\n::ng-deep .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-placeholder {\r\n\ttop: 8px;\r\n\tleft: 5px;\r\n}\r\n\r\n::ng-deep .multiselect-autocomplete.ng-select .ng-select-container {\r\n\toverflow: inherit !important;\r\n}\r\n\r\n::ng-deep .multiselect-autocomplete .exclude-items-container {\r\n\tdisplay: none;\r\n\tposition: absolute;\r\n\tjustify-content: space-between;\r\n\tpadding-left: 0.4rem;\r\n\tpadding-right: 0.4rem;\r\n\tleft: auto;\r\n\tright: -20px;\r\n\ttop: 30px;\r\n\tz-index: 9999;\r\n}\r\n\r\n::ng-deep .multiselect-autocomplete .ng-value.item-length .inner-wrap {\r\n\tposition: relative;\r\n}\r\n\r\n::ng-deep .multiselect-autocomplete .ng-value.item-length {\r\n\tcursor: pointer;\r\n\tz-index: 9;\r\n}\r\n\r\n::ng-deep .multiselect-autocomplete .ng-value.item-length:hover .exclude-items-container {\r\n\tdisplay: flex;\r\n}\r\n\r\n::ng-deep .exclude-items-container > ul.items-other {\r\n\tpadding: 0.1rem;\r\n\tbackground: rgba(0, 0, 0, 0.8);\r\n\tborder-radius: 8px;\r\n\tbox-shadow: 0px 0px 4px 0px #c3c3c3;\r\n\tcolor: #fff;\r\n\tmin-width: 153px;\r\n}\r\n\r\n::ng-deep .exclude-items-container > ul.items-other:after {\r\n\tposition: absolute;\r\n\tcontent: ' ';\r\n\ttop: -8px;\r\n\tright: 14%;\r\n\tmargin-left: -4px;\r\n\twidth: 0;\r\n\theight: 0;\r\n\tborder-left: 8px solid transparent;\r\n\tborder-right: 8px solid transparent;\r\n\tborder-bottom: 8px solid rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n::ng-deep .exclude-items-container > ul.items-other li > span {\r\n\tfont-size: 12px;\r\n}\r\n\r\n::ng-deep .exclude-items-container > ul.items-other li {\r\n\tlist-style: none;\r\n\tdisplay: flex;\r\n\tjustify-content: space-evenly;\r\n\tpadding: 8px 0px;\r\n}\r\n\r\n::ng-deep .exclude-items-container > ul.items-other li span {\r\n\tmargin-left: 0.2rem;\r\n}\r\n\r\n::ng-deep .exclude-items-container > .tags.tags-blue:hover ~ ul.items-other {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n}\r\n\r\n::ng-deep .exclude-items-container ul.items-other .items-title {\r\n\tword-break: break-word;\r\n\tmin-width: 100px;\r\n\twhite-space: nowrap;\r\n\toverflow: hidden;\r\n\tline-height: 22px;\r\n\tmargin-left: 0px;\r\n\ttext-overflow: ellipsis;\r\n\tmargin-right: 4px;\r\n}\r\n\r\n::ng-deep .exclude-items-container .tags {\r\n\twidth: 24px;\r\n\theight: 24px;\r\n\tline-height: 22px;\r\n\ttext-align: center;\r\n\tfont-size: 9.6px !important;\r\n\tborder-radius: 50px;\r\n}\r\n\r\n::ng-deep .exclude-items-container .tags.tags-red {\r\n\tcolor: #b34195;\r\n\tbackground-color: #fdeef9;\r\n}\r\n\r\n::ng-deep .exclude-items-container .tags.tags-green {\r\n\tcolor: #23702a;\r\n\tbackground-color: #eaf4eb;\r\n}\r\n\r\n::ng-deep .exclude-items-container .tags.tags-purple {\r\n\tcolor: #511c8e;\r\n\tbackground-color: #efe9f5;\r\n}\r\n\r\n::ng-deep .exclude-items-container .tags.tags-blue {\r\n\twidth: 30px;\r\n\theight: 30px;\r\n\tcolor: #0f197b;\r\n\tfont-weight: 500;\r\n\tfont-size: 12px !important;\r\n\tline-height: 30px;\r\n\tmargin-top: -4px;\r\n\tbackground-color: #f4f5ff;\r\n}\r\n\r\n.option-label-size {\r\n\tfont-size: 12px;\r\n}\r\n\r\n.option-line-height {\r\n\tline-height: 10px;\r\n}\r\n\r\n.item-length {\r\n\tposition: absolute;\r\n\tright: 45px;\r\n}\r\n\r\n.wrap-text {\r\n\tdisplay: block;\r\n\twhite-space: nowrap;\r\n\twidth: 70px;\r\n\toverflow: hidden;\r\n\ttext-overflow: ellipsis;\r\n}\r\n\r\n.initial {\r\n\tdisplay: none;\r\n}\r\n\r\n.with-initial .initial {\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100px;\r\n\tbackground-color: #fdeef9;\r\n\tcolor: #c162a8;\r\n\tfont-size: 7px;\r\n\tpadding: 0;\r\n\theight: 18px;\r\n\twidth: 18px;\r\n\tmargin: 2px;\r\n\tfont-style: normal;\r\n\toverflow: hidden;\r\n}\r\n\r\n.with-initial .ng-value {\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder: 1px solid #0f197b;\r\n\tborder-radius: 50px !important;\r\n\tbackground: #fff !important;\r\n}\r\n\r\n.with-initial .ng-value .ng-value-label {\r\n\tdisplay: flex;\r\n}\r\n\r\n.with-initial .item-length {\r\n\tbackground-color: #f4f5ff !important;\r\n\tborder-color: #f4f5ff;\r\n\tfont-size: 10px !important;\r\n\tmin-width: 27px;\r\n}\r\n\r\n.with-initial .ng-value.item-length .ng-value-label {\r\n\tpadding: 0;\r\n\tcolor: #0f197b;\r\n}\r\n\r\n.with-initial .ng-value .ng-value-icon.right {\r\n\tbackground-color: #0f197b;\r\n\tborder-radius: 50px;\r\n\tcolor: #fff;\r\n\twidth: 14px;\r\n\theight: 14px;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tmargin-right: 4px;\r\n\tfont-size: 13px;\r\n\tpadding: 0;\r\n}\r\n\r\n.option-line-height-code {\r\n\tfont-weight: 400;\r\n\tfont-size: 13px;\r\n\tmargin-top: 2px;\r\n}\r\n\r\n.user-detail {\r\n\tdisplay: flex;\r\n\tmargin-right: 2em;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n\t.with-initial .item-length {\r\n\t\tright: 30px;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./telco-list.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"!showCustomOption\" >\n  <ng-select (add)=\"onAddValue($event)\" (change)=\"onChangeValue($event)\" (paste)=\"onPasteSearch($event)\"\n    (remove)=\"onRemoveValue($event)\" (search)=\"onSearchValue($event)\" [(ngModel)]=\"selectedDropdownlist\"\n    [addTag]=\"addTag\" [bindLabel]=\"bindLabel\" [items]=\"dropdownlist\" [multiple]=\"multiselect\"\n    [ngClass]=\"{classes: true,insertSearchIcon:customDropdownIcon}\" [placeholder]=\"placeholder\" [virtualScroll]=\"true\"\n    [readonly]=\"disableInput\" class=\"multiselect-autocomplete\" [ngStyle]=\"{'font-family':fontFamily }\">\n    <ng-template let-clear=\"clear\" let-items=\"items\" ng-multi-label-tmp>\n      <div class=\"user-detail\">\n        <div *ngFor=\"let item of items | slice:0:itemsLimit\" class=\"ng-value\">\n          <span class=\"ng-value-label\" title=\"{{$any(item)[bindLabelArray[0]]}}\"\n            [ngClass]=\"{'wrap-text':$any(item)[bindLabelArray[0]].length>4}\"><em class=\"initial\">\n              {{$any(item).symbol}}</em>\n            <span>{{$any(item)[bindLabelArray[0]]}}</span></span>\n          <span (click)=\"clear(item)\" aria-hidden=\"true\" class=\"ng-value-icon right\">×</span>\n        </div>\n      </div>\n      <div *ngIf=\"items.length > itemsLimit\" class=\"ng-value item-length\">\n        <div class=\"inner-wrap\">\n          <span class=\"ng-value-label\">+{{items.length - itemsLimit}}</span>\n          <div class=\"exclude-items-container\">\n            <ul class=\"items-other\">\n              <li *ngFor=\"let item of items | slice:itemsLimit\">\n                <div class=\"d-flex\">\n                  <span *ngIf=\"withLimitInitial\" class=\"tags tags-green mr-2\">{{$any(item).symbol}}</span><span\n                    class=\"items-title\">{{$any(item)[bindLabelArray[0]]}}</span>\n                  <span (click)=\"clear(item)\" aria-hidden=\"true\" class=\"ng-value-icon right\">×</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </ng-select>\n</ng-container>\n<ng-container *ngIf=\"showCustomOption\">\n  <ng-select (change)=\"onAutoCompleteChange($event)\" (click)=\"onOptionSelected($event)\" (paste)=\"onPasteSearch($event)\"\n    (search)=\"onDropdownSearch($event)\" [(ngModel)]=\"selectedDropdownlist\" [bindLabel]=\"bindLabel\"\n    [items]=\"dropdownlist\" [multiple]=\"multiselect\" [ngClass]=\"{classes: true,insertSearchIcon:customDropdownIcon}\"\n    [placeholder]=\"placeholder\" [searchFn]=\"customSearch\" [searchWhileComposing]=\"false\" [virtualScroll]=\"true\"\n    class=\"multiselect-autocomplete\" [ngStyle]=\"{'font-family':fontFamily }\">\n    <ng-template #labelTemplate *ngIf=\"showCustomOption\" let-item=\"item\" ng-option-tmp>\n      <div class=\"option-line-height\">\n        <div>\n          <h6 class=\"font-weight-bold d-flex\">{{item[bindLabelArray[0]]}}\n            <span *ngIf=\"multiLabelBinding && bindLabelArray?.length > 1\" class=\"ml-2 option-line-height-code\">({{\n              item[bindLabelArray[1]] }})</span>\n          </h6>\n        </div>\n        <span class=\"option-label-size\">{{ item[bindLabelArray[2]] }}</span>\n      </div>\n    </ng-template>\n    <ng-template let-clear=\"clear\" let-items=\"items\" ng-multi-label-tmp>\n      <div class=\"user-detail\">\n        <div *ngFor=\"let item of items | slice:0:itemsLimit\" class=\"ng-value\">\n          <span class=\"ng-value-label\" title=\"{{$any(item)[bindLabelArray[0]]}}\"\n            [ngClass]=\"{'wrap-text':$any(item)[bindLabelArray[0]].length>4}\"><em class=\"initial\">\n              {{$any(item).symbol}}</em>\n            <span>{{$any(item)[bindLabelArray[0]]}}</span></span>\n          <span (click)=\"clear(item)\" aria-hidden=\"true\" class=\"ng-value-icon right\">×</span>\n        </div>\n      </div>\n      <div *ngIf=\"items.length > itemsLimit\" class=\"ng-value item-length\">\n        <div class=\"inner-wrap\">\n          <span class=\"ng-value-label\">+{{items.length - itemsLimit}}</span>\n          <div class=\"exclude-items-container\">\n            <ul class=\"items-other\">\n              <li *ngFor=\"let item of items | slice:itemsLimit\">\n                <div class=\"d-flex\">\n                  <span *ngIf=\"withLimitInitial\" class=\"tags tags-green mr-2\">{{$any(item).symbol}}</span><span\n                    class=\"items-title\">{{$any(item)[bindLabelArray[0]]}}</span>\n                  <span (click)=\"clear(item)\" aria-hidden=\"true\" class=\"ng-value-icon right\">×</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </ng-select>\n</ng-container>\n"
        },
        {
            "name": "TelcoMapsComponent",
            "id": "component-TelcoMapsComponent-053f7dbad5c9e1e3e05e6baf1d1f58e2cf126f2c911f1d2a1d90e0e937a207dd9e5e87866b4422bed62ef25f111d3f84e042435fe3ce1c1dad0c716e61f56e51",
            "file": "src/app/telco-maps/telco-maps.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-maps",
            "styleUrls": [
                "./telco-maps.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-maps.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 138,
                    "type": "IMapConfig",
                    "decorators": []
                },
                {
                    "name": "markers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 143,
                    "type": "IMapMarkers",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "hideDialog",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 157,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "showDialog",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 155,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_mapConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMapConfig",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "_mapDefaultConfig",
                    "defaultValue": "{\n\t\ticonDefault: 'SITE',\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\n\t\ticonColor: '#E04B4B',\n\t\ticonAnchorX: 31,\n\t\ticonAnchorY: -33,\n\t\tzoomLevelToChangeIcon: 14,\n\t\tcenterOnMapUpdate: true,\n\t\tcenterOnBounds: true,\n\t\tshowMesh: true,\n\t\tfilterMarkersOutsideBounds: false,\n\t}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMapConfig",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "_markers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMapMarkers",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "bounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "boundsBeforeSpiderfy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "data2",
                    "defaultValue": "[\n\t\t{\n\t\t\ttitle: 'CE-id-123',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "iw",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "mapElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'map'"
                        }
                    ]
                },
                {
                    "name": "markersHash",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "mesh",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "neId",
                    "defaultValue": "'ne_135'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "oms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "preSpiderfyTimerref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "spiderfyTimerref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "staticMarker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "ticketid",
                    "defaultValue": "'ticket-123'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "unspiderfyTimerref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "viewInit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "zoomLevel",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "addLine",
                    "args": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sourceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destinationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sourceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destinationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMarker",
                    "args": [
                        {
                            "name": "marker",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oms",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.oms"
                        },
                        {
                            "name": "iw",
                            "type": "google.maps.InfoWindow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.iw"
                        },
                        {
                            "name": "markers",
                            "type": "Array<google.maps.Marker>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 360,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "marker",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oms",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.oms",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "iw",
                            "type": "google.maps.InfoWindow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.iw",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "markers",
                            "type": "Array<google.maps.Marker>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "centerMap",
                    "args": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "markers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 607,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "markers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterMarkers",
                    "args": [
                        {
                            "name": "markers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bounds",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 701,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "markers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bounds",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateLayout",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 483,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getActions",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getinfoContent",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMapMarker",
                    "args": [
                        {
                            "name": "map",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "marker",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 417,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "marker",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMapMarkerIcon",
                    "args": [
                        {
                            "name": "marker",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "icon",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ path: any; fillColor: any; fillOpacity: number; strokeColor: string; anchor: any; scale: number; }",
                    "typeParameters": [],
                    "line": 511,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "marker",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "icon",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenToMarkerHover",
                    "args": [
                        {
                            "name": "marker",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 636,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "marker",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenToZoomChange",
                    "args": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 630,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "oneTimeSetup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                },
                {
                    "name": "onSpiderfierEvent",
                    "args": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "markers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 538,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "markers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeLine",
                    "args": [
                        {
                            "name": "line",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMapIcon",
                    "args": [
                        {
                            "name": "map",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 673,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 134
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';\nimport mapIcons from './map-icons';\ndeclare let OverlappingMarkerSpiderfier: any;\ndeclare let MarkerClusterer: any;\n\nexport interface IMap {\n\tconfig?: IMapConfig;\n\tmarkers: IMapMarkers;\n}\n\nexport interface IMapConfig {\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n\ticonColor?: string;\n\ticonAnchorX?: number;\n\ticonAnchorY?: number;\n\tzoomLevelToChangeIcon?: number;\n\tcenterOnMapUpdate?: boolean;\n\tcenterOnBounds?: boolean;\n\tshowMesh?: boolean;\n\tbounds?: IMapBound;\n\tfilterMarkersOutsideBounds?: boolean;\n}\n\nexport interface IMapBound {\n\tstart: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n\tend: {\n\t\tlat: string;\n\t\tlng: string;\n\t};\n}\n\nexport type IMapMarkers = Array<IMapMarker>;\nexport interface IMapMarker {\n\tid: string;\n\tlat: string;\n\tlng: string;\n\ttitle: string;\n\tlabel: string;\n\tlink: string;\n\tmesh?: Array<string>;\n\tcolor?: string;\n\ticonDefault?: string;\n\ticonZoomed?: string;\n\ticonSpiderfied?: string;\n}\n\n@Component({\n\tselector: 'app-telco-maps',\n\ttemplateUrl: './telco-maps.component.html',\n\tstyleUrls: ['./telco-maps.component.scss'],\n})\nexport class TelcoMapsComponent implements AfterViewInit {\n\tmap: any;\n\toms: any;\n\tiw: any;\n\tbounds: any;\n\tzoomLevel = 1;\n\t_markers!: IMapMarkers;\n\tmarkersHash = {};\n\tmesh: any;\n\t_mapConfig: IMapConfig;\n\t_mapDefaultConfig: IMapConfig = {\n\t\ticonDefault: 'SITE',\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\n\t\ticonColor: '#E04B4B',\n\t\ticonAnchorX: 31,\n\t\ticonAnchorY: -33,\n\t\tzoomLevelToChangeIcon: 14,\n\t\tcenterOnMapUpdate: true,\n\t\tcenterOnBounds: true,\n\t\tshowMesh: true,\n\t\tfilterMarkersOutsideBounds: false,\n\t};\n\tstaticMarker: any;\n\tviewInit = false;\n\tboundsBeforeSpiderfy: any;\n\tpreSpiderfyTimerref: any;\n\tspiderfyTimerref: any;\n\tunspiderfyTimerref: any;\n\n\tneId = 'ne_135';\n\tticketid = 'ticket-123';\n\tdata2: any = [\n\t\t{\n\t\t\ttitle: 'CE-id-123',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-124',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-125',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t\t{\n\t\t\ttitle: 'CE-id-126',\n\t\t\tactions: ['Edit', 'Delete'],\n\t\t},\n\t];\n\n\t@ViewChild('map') mapElement;\n\t@HostListener('window:resize', ['$event'])\n\tonResize() {\n\t\tthis.centerMap(this.map, this.map.markers);\n\t}\n\n\t@Input() set config(value: IMapConfig) {\n\t\tthis._mapConfig = { ...this._mapDefaultConfig, ...value };\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\t@Input() set markers(value: IMapMarkers) {\n\t\tlet filteredMarkers = value;\n\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\tfilteredMarkers = this.filterMarkers(value, this._mapConfig.bounds);\n\t\t}\n\t\tthis._markers = filteredMarkers;\n\t\t// console.log(this._markers);\n\n\t\tif (!this.viewInit) return;\n\t\tthis.resetMarkers();\n\t}\n\n\t@Output() showDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\t@Output() hideDialog: EventEmitter<any> = new EventEmitter<any>();\n\n\tconstructor(private zone: NgZone) {}\n\n\tngAfterViewInit() {\n\t\tif (!(this._markers && this._markers.length > 0)) {\n\t\t\tthis.oneTimeSetup();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.oneTimeSetup();\n\n\t\tthis.resetMarkers();\n\n\t\tthis.viewInit = true;\n\t}\n\n\toneTimeSetup() {\n\t\t// Load map\n\t\tconst mapProperties = {\n\t\t\tcenter: new google.maps.LatLng(0, 0),\n\t\t\tzoom: 10,\n\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t\tfullscreenControl: false,\n\t\t\t// restriction: {\n\t\t\t//   latLngBounds: latLngBounds,\n\t\t\t//   strictBounds: false,\n\t\t\t// },\n\t\t};\n\n\t\tconst latLngBounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig && this._mapConfig.bounds) {\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tlatLngBounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\n\t\t\tmapProperties['restriction'] = {\n\t\t\t\tlatLngBounds: latLngBounds,\n\t\t\t\tstrictBounds: false,\n\t\t\t};\n\t\t}\n\n\t\t// HTML canvas keeps misfiring ApplicationRef.tick()\n\t\t// To prevent that, initialize canvas outside angular\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map = new google.maps.Map(this.mapElement.nativeElement, mapProperties);\n\t\t});\n\n\t\tif (this._mapConfig && this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.map.fitBounds(latLngBounds);\n\t\t}\n\n\t\t// Add markers array\n\t\tthis.map.markers = [];\n\n\t\t// Add marker listener array\n\t\tthis.map.markerListeners = [];\n\n\t\t// Add mesh array\n\t\tthis.map.mesh = [];\n\n\t\t// Add cluster object\n\t\tthis.map.markerCluster = null;\n\n\t\t// // Create spiderfier instance\n\t\t// const options = {\n\t\t//   keepSpiderfied: true, // will keep spider chart open after clicking on a marker to show Infowindow\n\t\t//   markersWontMove: true, // we promise not to move any markers, allowing optimizations\n\t\t//   markersWontHide: true, // we promise not to change visibility of any markers, allowing optimizations\n\t\t//   basicFormatEvents: true, // allow the library to skip calculating advanced formatting information\n\t\t//   minZoomLevel: this._mapConfig.zoomLevelToChangeIcon, // minimum zoom level at which cluster will spiderfy\n\t\t// };\n\t\t// this.oms = new OverlappingMarkerSpiderfier(this.map, options);\n\n\t\t// // Add info window\n\t\t// this.iw = new google.maps.InfoWindow();\n\n\t\t// Attach zoom change listener\n\t\tthis.listenToZoomChange(this.map);\n\t}\n\n\tresetMarkers() {\n\t\t// If markers already exist, remove them before plotting new ones\n\t\tif (this.map && this.map.markers && this.map.markers.length > 0) {\n\t\t\t// this.oms.removeAllMarkers();\n\t\t\tthis.map.markerCluster.clearMarkers();\n\n\t\t\tthis.map.mesh.forEach((e: any) => {\n\t\t\t\tthis.removeLine(e);\n\t\t\t});\n\t\t\tthis.map.markerListeners.forEach((e: any) => {\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseover);\n\t\t\t\tgoogle.maps.event.clearInstanceListeners(e.mouseout);\n\t\t\t});\n\t\t\tthis.map.markers = [];\n\t\t\tthis.map.markerListeners = [];\n\t\t\tthis.map.mesh = [];\n\t\t\tthis.markersHash = {};\n\t\t}\n\n\t\t// If exists, add markers\n\t\tif (this._markers && this._markers.length > 0) {\n\t\t\t// Filter markers on map bounds\n\t\t\tif (this._mapConfig.bounds && this._mapConfig.filterMarkersOutsideBounds) {\n\t\t\t\tthis._markers = this.filterMarkers(this._markers, this._mapConfig.bounds);\n\t\t\t}\n\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tthis.addMarker(e, this.map, this.oms, this.iw, this.map.markers);\n\t\t\t});\n\t\t}\n\n\t\t// Create marker cluster\n\t\tconst mcOptions = {\n\t\t\tstyles: [\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttextColor: 'white',\n\t\t\t\t\theight: 32,\n\t\t\t\t\turl: 'assets/images/map-markers/marker.png',\n\t\t\t\t\twidth: 32,\n\t\t\t\t},\n\t\t\t],\n\t\t\t// styles: [\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 53,\n\t\t\t//     url: 'assets/images/map-markers/m1.png',\n\t\t\t//     width: 53,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 56,\n\t\t\t//     url: 'assets/images/map-markers/m2.png',\n\t\t\t//     width: 56,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 66,\n\t\t\t//     url: 'assets/images/map-markers/m3.png',\n\t\t\t//     width: 66,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 78,\n\t\t\t//     url: 'assets/images/map-markers/m4.png',\n\t\t\t//     width: 78,\n\t\t\t//   },\n\t\t\t//   {\n\t\t\t//     textColor: 'white',\n\t\t\t//     height: 90,\n\t\t\t//     url: 'assets/images/map-markers/m5.png',\n\t\t\t//     width: 90,\n\t\t\t//   },\n\t\t\t// ],\n\t\t};\n\t\tthis.map.markerCluster = new MarkerClusterer(this.map, this.map.markers, mcOptions);\n\n\t\t// If mesh enabled, add mesh\n\t\tif (this._mapConfig.showMesh) {\n\t\t\tthis._markers.forEach((e) => {\n\t\t\t\tif (e.mesh && e.mesh.length > 0) {\n\t\t\t\t\te.mesh.forEach((m) => {\n\t\t\t\t\t\tthis.addLine(this.map, e.id, m);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Center\n\t\tif (this._mapConfig.centerOnMapUpdate) {\n\t\t\tthis.centerMap(this.map, this.map.markers);\n\t\t}\n\t\t// else {\n\t\t//   // fit to bounds\n\t\t//   this.map.fitBounds(this.bounds);\n\t\t// }\n\t}\n\n\taddMarker(marker: any, map: any, oms = this.oms, iw: google.maps.InfoWindow = this.iw, markers: Array<google.maps.Marker>) {\n\t\tconst mapMarker = this.getMapMarker(map, marker);\n\n\t\tmarkers.push(mapMarker);\n\n\t\t// Attach marker hover listener\n\t\tthis.listenToMarkerHover(mapMarker);\n\n\t\tthis.markersHash[marker.id] = { lat: marker.lat, lng: marker.lng };\n\n\t\t// oms.trackMarker(mapMarker);\n\n\t\t// oms.addListener('click', function (mapMarker, event: Event) {\n\t\t//   iw.setContent(mapMarker.description);\n\t\t//   iw.open(map, mapMarker);\n\t\t// });\n\n\t\t// oms.addListener('pre-spiderfy', (marker: Element) => {\n\t\t//   this.onSpiderfierEvent(this.map, [marker], 'pre-spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('spiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'spiderfy');\n\t\t//   iw.close();\n\t\t// });\n\n\t\t// oms.addListener('unspiderfy', (markers: Array<Element>) => {\n\t\t//   this.onSpiderfierEvent(this.map, markers, 'unspiderfy');\n\t\t// });\n\t}\n\n\taddLine(map: any, sourceId: string, destinationId: string) {\n\t\tconst sMarker = this.markersHash[sourceId];\n\t\tconst dMarker = this.markersHash[destinationId];\n\t\tif (!sMarker || !dMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst source = new google.maps.LatLng(sMarker.lat, sMarker.lng);\n\t\tconst destination = new google.maps.LatLng(dMarker.lat, dMarker.lng);\n\n\t\tconst line = new google.maps.Polyline({\n\t\t\tmap: map,\n\t\t\tpath: [source, destination],\n\t\t\tstrokeColor: '#444',\n\t\t\tstrokeWeight: 1.5,\n\t\t\tzIndex: +google.maps.Marker.MAX_ZINDEX + 1,\n\t\t});\n\n\t\tmap.mesh.push(line);\n\t}\n\n\tremoveLine(line) {\n\t\tline.setMap(null);\n\t}\n\n\tgetMapMarker(map, marker) {\n\t\tconst locationAddressLatLng = new google.maps.LatLng(marker.lat, marker.lng);\n\t\t// const infoContent =\n\t\t//   '<div class=\"locationInfo\">' +\n\t\t//   '<div><strong>' +\n\t\t//   marker.title +\n\t\t//   '</strong></div>' +\n\t\t//   '<div>' +\n\t\t//   marker.label +\n\t\t//   '</div>' +\n\t\t//   '<a href=\"' +\n\t\t//   marker.link +\n\t\t//   '\">Se profil</a></div>';\n\n\t\t// const infoContent = this.getinfoContent();\n\n\t\tconst iconDefault = this.getMapMarkerIcon(marker, marker.iconDefault ? marker.iconDefault : this._mapConfig.iconDefault);\n\t\tconst iconZoomed = this.getMapMarkerIcon(marker, marker.iconZoomed ? marker.iconZoomed : this._mapConfig.iconZoomed);\n\t\tconst iconSpiderfied = this.getMapMarkerIcon(marker, marker.iconSpiderfied ? marker.iconSpiderfied : this._mapConfig.iconSpiderfied);\n\n\t\tconst mapMarker = new google.maps.Marker({\n\t\t\tmap: map,\n\t\t\tposition: locationAddressLatLng,\n\t\t\ticon: map.getZoom() < this._mapConfig.zoomLevelToChangeIcon ? iconDefault : iconZoomed,\n\t\t});\n\t\t// mapMarker.set('description', infoContent);\n\t\tmapMarker.set('iconDefault', iconDefault);\n\t\tmapMarker.set('iconZoomed', iconZoomed);\n\t\tmapMarker.set('iconSpiderfied', iconSpiderfied);\n\n\t\treturn mapMarker;\n\t}\n\n\tgetinfoContent() {\n\t\tconst htmlStr =\n\t\t\t`<div id=\"map-content-box\">\n      <div class=\"header-wrapper\">\n        <div class=\"left-box\">\n          <div class=\"line1\">\n            <p id=\"pid\">` +\n\t\t\tthis.neId +\n\t\t\t`</p>\n      </div>\n      <div class=\"line2\">\n        <p id=\"pid\" class=\" opacity50 margin10\"> Alarms:` +\n\t\t\t300 +\n\t\t\t`</p>\n      <p id=\"pid\" class=\"opacity50\">Ticket:` +\n\t\t\t200 +\n\t\t\t`</p>\n      </div>\n    </div>\n    <div class=\"right-box\">\n      <div class=\"icon-box margin10 \"></div>\n      <div class=\"icon-box\"></div>\n    </div>\n  </div>\n  <div class=\"body-wrapper\">` +\n\t\t\tthis.generateLayout() +\n\t\t\t`  </div>\n      </div>\n      `;\n\n\t\treturn htmlStr;\n\t}\n\n\tgenerateLayout() {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < this.data2.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t` <div class=\"row\">\n        <div class=\"body-row\">\n          <p id=\"pid\" class=\"text\">` +\n\t\t\t\tthis.data2[i].title +\n\t\t\t\t`</p>\n        </div>\n        <div class=\"right-box\">` +\n\t\t\t\tthis.getActions(this.data2[i].actions) +\n\t\t\t\t`</div>\n        </div>`;\n\t\t}\n\t\treturn str;\n\t}\n\n\tgetActions(data) {\n\t\tlet str = '';\n\t\tfor (let i = 0; i < data.length; i += 1) {\n\t\t\tstr +=\n\t\t\t\t`<div class=\"icon-box margin10\">\n        ` + `</div>`;\n\t\t\treturn str;\n\t\t}\n\t}\n\n\tgetMapMarkerIcon(marker: any, icon: any) {\n\t\t// var iconDot = {\n\t\t//   path: 'M-3,0a3,3 0 1,0 6,0a3,3 0 1,0 -6,0',\n\t\t//   fillColor: 'red',\n\t\t//   fillOpacity: 1,\n\t\t//   strokeColor: 'transparent',\n\t\t//   anchor: new google.maps.Point(0, 0),\n\t\t// };\n\n\t\treturn {\n\t\t\tpath: mapIcons.markers[icon.toUpperCase()],\n\t\t\tfillColor: marker.color ? marker.color : this._mapConfig.iconColor,\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeColor: 'transparent',\n\t\t\tanchor: new google.maps.Point(this._mapConfig.iconAnchorX, this._mapConfig.iconAnchorY),\n\t\t\tscale: 1,\n\t\t};\n\t}\n\n\t// removeMarker(marker) {\n\t//   this.oms.removeMarker(marker);\n\t// }\n\n\t// removeAllMarkers() {\n\t//   this.oms.removeAllMarkers();\n\t// }\n\n\tonSpiderfierEvent(map: any, markers: any, type: string) {\n\t\tswitch (type) {\n\t\t\tcase 'pre-spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.preSpiderfyTimerref) return;\n\t\t\t\tthis.preSpiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.preSpiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Delete static marker if already exists\n\t\t\t\t// (Happens when you click on a marker when another\n\t\t\t\t// marker is already spiderfied)\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\tthis.staticMarker = new google.maps.Marker({\n\t\t\t\t\tmap: map,\n\t\t\t\t\tposition: new google.maps.LatLng(markers[0].position.lat(), markers[0].position.lng()),\n\t\t\t\t\ticon: markers[0].iconZoomed,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'spiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.spiderfyTimerref) return;\n\t\t\t\tthis.spiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.spiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Change icon\n\t\t\t\tmarkers.forEach((e: any) => {\n\t\t\t\t\te.setIcon(e.iconSpiderfied);\n\t\t\t\t});\n\n\t\t\t\t// // Center\n\t\t\t\t// this.boundsBeforeSpiderfy = this.bounds;\n\t\t\t\t// this.centerMap(map, markers);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unspiderfy':\n\t\t\t\t// Block multiple events\n\t\t\t\tif (this.unspiderfyTimerref) return;\n\t\t\t\tthis.unspiderfyTimerref = setTimeout(() => {\n\t\t\t\t\tthis.unspiderfyTimerref = null;\n\t\t\t\t}, 1);\n\n\t\t\t\t// Remove static marker\n\t\t\t\tif (this.staticMarker) {\n\t\t\t\t\tthis.staticMarker.setMap(null);\n\t\t\t\t\tthis.staticMarker = null;\n\t\t\t\t}\n\n\t\t\t\t// Change icon\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst zoomed = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\t\t\t\t\tmarkers.forEach((e) => {\n\t\t\t\t\t\te.setIcon(zoomed ? e.iconZoomed : e.iconDefault);\n\t\t\t\t\t});\n\t\t\t\t}, 1);\n\n\t\t\t\t// // Center\n\t\t\t\t// this.bounds = this.boundsBeforeSpiderfy;\n\t\t\t\t// map.fitBounds(this.bounds);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tcenterMap(map: any, markers: any) {\n\t\tthis.bounds = new google.maps.LatLngBounds();\n\n\t\tif (this._mapConfig.bounds && this._mapConfig.centerOnBounds) {\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.start.lat, +this._mapConfig.bounds.start.lng));\n\n\t\t\tthis.bounds.extend(new google.maps.LatLng(+this._mapConfig.bounds.end.lat, +this._mapConfig.bounds.end.lng));\n\t\t} else {\n\t\t\tmarkers.forEach((marker: any) => {\n\t\t\t\tconst latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());\n\t\t\t\tthis.bounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t\t// fit to bounds\n\t\tmap.fitBounds(this.bounds);\n\n\t\t// zoom out if greater than threshold\n\t\tsetTimeout((_) => {\n\t\t\tmap.getZoom() <= this._mapConfig.zoomLevelToChangeIcon ? null : map.setZoom(this._mapConfig.zoomLevelToChangeIcon);\n\t\t}, 1);\n\t}\n\n\tlistenToZoomChange(map: any) {\n\t\tgoogle.maps.event.addListener(map, 'zoom_changed', () => {\n\t\t\tthis.updateMapIcon(map);\n\t\t});\n\t}\n\n\tlistenToMarkerHover(marker: any) {\n\t\tconst mouseover = marker.addListener('mouseover', (e: any) => {\n\t\t\tconst index = this._markers.findIndex((marker) => {\n\t\t\t\treturn +marker.lat === +e.latLng.lat() && +marker.lng === +e.latLng.lng();\n\t\t\t});\n\t\t\t// console.log(\n\t\t\t//   'Mousein',\n\t\t\t//   e.latLng.lat(),\n\t\t\t//   e.latLng.lng(),\n\t\t\t//   this._markers,\n\t\t\t//   index,\n\t\t\t// );\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.showDialog.emit({\n\t\t\t\t\tmarker: this._markers[index],\n\t\t\t\t\tevent: e.domEvent,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst mouseout = marker.addListener('mouseout', (e: any) => {\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.hideDialog.emit(e.domEvent);\n\t\t\t});\n\t\t});\n\n\t\tthis.map.markerListeners.push({\n\t\t\tmouseover,\n\t\t\tmouseout,\n\t\t});\n\t}\n\n\t// unlistenToMarkerClick(_markers) {\n\t//   google.maps.event.clearListeners(marker, 'click', () => {\n\t//   });\n\t// }\n\n\tupdateMapIcon(map) {\n\t\tif (!this.map || !this.map.markers || !this.map.markers.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevZoomLevel = this.zoomLevel;\n\t\tthis.zoomLevel = this.map.getZoom();\n\t\tconst showZoomedIcon = this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon ? false : true;\n\n\t\t// Do not update icon if zoom threshold boundary is not crossed\n\t\tif (\n\t\t\t(prevZoomLevel < this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel < this._mapConfig.zoomLevelToChangeIcon) ||\n\t\t\t(prevZoomLevel >= this._mapConfig.zoomLevelToChangeIcon && this.zoomLevel >= this._mapConfig.zoomLevelToChangeIcon)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (showZoomedIcon) {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconZoomed);\n\t\t\t});\n\t\t} else {\n\t\t\tmap.markers.forEach((e: any) => {\n\t\t\t\te.setIcon(e.iconDefault);\n\t\t\t});\n\t\t}\n\t}\n\n\tfilterMarkers(markers: any, bounds: any): any {\n\t\tconst filteredMarkers = markers.filter((marker) => {\n\t\t\tconst latS = Math.min(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst latE = Math.max(+bounds.start.lat, +bounds.end.lat);\n\t\t\tconst lngS = Math.min(+bounds.start.lng, +bounds.end.lng);\n\t\t\tconst lngE = Math.max(+bounds.start.lng, +bounds.end.lng);\n\n\t\t\tif (+marker.lat >= latS && +marker.lat <= latE && +marker.lng >= lngS && +marker.lng <= lngE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn filteredMarkers;\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// html,\r\n// body,\r\n// #map_canvas {\r\n//   height: 100%;\r\n//   width: 100%;\r\n//   margin: 0px;\r\n// }\r\n\r\n// #map_canvas {\r\n//   position: relative;\r\n// }\r\n\r\n// .angular-google-map-container {\r\n//   position: absolute;\r\n//   top: 0;\r\n//   bottom: 0;\r\n//   right: 0;\r\n//   left: 0;\r\n// }\r\n.map-wrapper {\r\n\t.map-container {\r\n\t\tposition: absolute;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t\tpadding: 0px;\r\n\t\tborder-radius: 8px;\r\n\t}\r\n}\r\n\r\n// .map-container ::after {\r\n//   position: relative;\r\n//   height: 100%;\r\n//   width: 100%;\r\n//   padding: 0px;\r\n// }\r\n",
                    "styleUrl": "./telco-maps.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 157,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "IMapConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 138,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "IMapConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "markers": {
                    "name": "markers",
                    "setSignature": {
                        "name": "markers",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "IMapMarkers",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 143,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "IMapMarkers",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"map-wrapper\">\n\t<div fxFlex=\"1 1 100%\" #map class=\"map-container\"></div>\n</div>\n"
        },
        {
            "name": "TelcoPieChartComponent",
            "id": "component-TelcoPieChartComponent-2023060dc025a471f3bc433424eb2287c04bd59767428b65a7c4ef3cd057d1a8d79f78a8da56be62ed74aec8acbf0d65860ae616edc2441269d812e5f9825c43",
            "file": "src/app/telco-charts/telco-pie-chart/telco-pie-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-pie-chart",
            "styleUrls": [
                "./telco-pie-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-pie-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pieChartData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n\tselector: 'app-telco-pie-chart',\n\ttemplateUrl: './telco-pie-chart.component.html',\n\tstyleUrls: ['./telco-pie-chart.component.scss'],\n})\nexport class TelcoPieChartComponent {\n\t@Input() pieChartData: any = {};\n\n\tconstructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./telco-pie-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"anvil-role-semi_pie_chart\">\n\t<plotly-plot\n\t\t[data]=\"pieChartData.data\"\n\t\t[layout]=\"pieChartData.layout\"\n\t\t[useResizeHandler]=\"true\"\n\t\t[style]=\"{ position: 'relative', width: '100%', height: '100%' }\"></plotly-plot>\n</div>\n"
        },
        {
            "name": "TelcoSearchComponent",
            "id": "component-TelcoSearchComponent-956c136ad63830c11ac736b00871ea1ca4f8847b272ad9430e39489eac2abba5910f4d4be3085dab179df9f6da63211a20a33ece5ea2e6273e5654759e8da9ee",
            "file": "src/app/telco-search/telco-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-search",
            "styleUrls": [
                "./telco-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'#f5f7fb'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "borderColor",
                    "defaultValue": "'#e2e7ef'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "borderRadius",
                    "defaultValue": "'0px 4px 4px 0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fontFamily",
                    "defaultValue": "'Noto Sans, sans-serif'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "searchClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "iconUrl",
                    "defaultValue": "'../../assets/search-icon.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n\tselector: 'app-telco-search',\n\ttemplateUrl: './telco-search.component.html',\n\tstyleUrls: ['./telco-search.component.scss'],\n})\nexport class TelcoSearchComponent implements OnInit {\n\ticonUrl: String = '../../assets/search-icon.svg';\n\tsearchText: string = '';\n\n\t@Input() backgroundColor: string = '#f5f7fb';\n\t@Input() borderColor: string = '#e2e7ef';\n\t@Input() fontFamily: string = 'Noto Sans, sans-serif';\n\t@Input() placeholder: string = 'Search';\n\t@Input() borderRadius: string = '0px 4px 4px 0px';\n\n\t@Output() searchClicked = new EventEmitter<any>();\n\n\tconstructor() {}\n\tngOnInit(): void {}\n\n\tsearchClick() {\n\t\tthis.searchClicked.emit();\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tborder: 1px solid;\r\n\twidth: 100%;\r\n\theight: 2rem;\r\n\timg {\r\n\t\twidth: 10%;\r\n\t\theight: 100%;\r\n\t}\r\n\tinput {\r\n\t\twidth: 90%;\r\n\t\tborder: none;\r\n\t\tfont-size: 1rem;\r\n\t}\r\n\tinput:focus {\r\n\t\toutline: none;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./telco-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search\" [ngStyle]=\"{'background': backgroundColor,'border-color':borderColor,'border-radius':borderRadius}\">\n  <img [src]=\"iconUrl\" alt=\"icon\" (click)=\"searchClick()\">\n  <input type=\"text\" [placeholder]=\"placeholder\" [(ngModel)]=\"searchText\" [ngStyle]=\"{'background': backgroundColor,'font-family':fontFamily}\">\n</div>\n"
        },
        {
            "name": "TelcoTableComponent",
            "id": "component-TelcoTableComponent-cd5debf7bcb4985a21a87a69212fc04e60906cef1904830d700ad9660d208f7eec4acd9dba2c35193c636d879931079fb37eb55c666b8c08c89b4b6251ee7ee4",
            "file": "src/app/telco-table/telco-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telco-table",
            "styleUrls": [
                "./telco-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telco-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "PaginationShow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<InputDataInterFace>(ELEMENT_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['SiteName', 'CountofAlarm', 'Timestamp', 'RCA']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "announceSortChange",
                    "args": [
                        {
                            "name": "sortState",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortState",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort, Sort } from '@angular/material/sort';\n\nexport interface InputDataInterFace {\n\tSiteName: string;\n\tCountofAlarm: string;\n\tTimestamp: { date: string; time: string };\n\tRCA: { iconImg: string; status: string };\n}\n\nconst ELEMENT_DATA: InputDataInterFace[] = [\n\t{\n\t\tSiteName: 'Site Name 1',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2022',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 2',\n\t\tCountofAlarm: '09',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'Cell Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 4',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 5',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 6',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 7',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n];\n\n@Component({\n\tselector: 'app-telco-table',\n\ttemplateUrl: './telco-table.component.html',\n\tstyleUrls: ['./telco-table.component.scss'],\n})\nexport class TelcoTableComponent implements OnInit {\n\t@Input() PaginationShow: boolean = false;\n\tdisplayedColumns = ['SiteName', 'CountofAlarm', 'Timestamp', 'RCA'];\n\tdataSource = new MatTableDataSource<InputDataInterFace>(ELEMENT_DATA);\n\n\t@ViewChild(MatSort) sort: MatSort;\n\t@ViewChild(MatPaginator) paginator: MatPaginator;\n\n\tconstructor(private _liveAnnouncer: LiveAnnouncer) {}\n\n\tngOnInit() {\n\t\tthis.dataSource.paginator = this.paginator;\n\t\tthis.dataSource.sort = this.sort;\n\t\tthis.dataSource.sortingDataAccessor = (item, property) => {\n\t\t\tswitch (property) {\n\t\t\t\tcase 'RCA': {\n\t\t\t\t\treturn item.RCA.status;\n\t\t\t\t}\n\n\t\t\t\tcase 'Timestamp': {\n\t\t\t\t\tlet newDate = new Date(item.Timestamp.date);\n\t\t\t\t\treturn newDate;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn item[property];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// for sorting\n\tannounceSortChange(sortState: Sort) {\n\t\tif (sortState.direction) {\n\t\t\tthis._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\n\t\t} else {\n\t\t\tthis._liveAnnouncer.announce('Sorting cleared');\n\t\t}\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "html {\r\n\tfont-size: 14px;\r\n\tfont-family: 'Noto Sans', sans-serif;\r\n\tfont-style: normal;\r\n}\r\n\r\nth.mat-sort-header-sorted {\r\n\tcolor: black;\r\n}\r\n\r\n.mat-table {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n}\r\n.hidden {\r\n\tdisplay: none;\r\n}\r\n\r\n.mat-body p,\r\n.mat-body-1 p,\r\n::ng-deep.mat-typography p {\r\n\tmargin: revert !important;\r\n}\r\n\r\n.mat-header-cell {\r\n\tcolor: #333333;\r\n\tfont-weight: 600;\r\n\tfont-size: 1rem;\r\n}\r\n\r\n.mat-cell {\r\n\tcolor: #594e4e;\r\n\tfont-weight: 400;\r\n\tfont-size: 1rem;\r\n}\r\n.mat-column-select {\r\n\toverflow: initial;\r\n}\r\n\r\n.RCA-cell {\r\n\tp {\r\n\t\tpadding-left: 1rem;\r\n\t}\r\n}\r\n\r\n.mat-paginator-sticky {\r\n\tbottom: 0;\r\n\tposition: sticky;\r\n\tz-index: 10;\r\n}\r\n",
                    "styleUrl": "./telco-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_liveAnnouncer",
                        "type": "LiveAnnouncer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 124,
                "jsdoctags": [
                    {
                        "name": "_liveAnnouncer",
                        "type": "LiveAnnouncer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mat-elevation-z8\" *ngIf=\"dataSource\">\r\n\t<table mat-table [dataSource]=\"dataSource\" matSort (matSortChange)=\"announceSortChange($event)\">\r\n\t\t<!-- to add all the rows -->\r\n\t\t<ng-container matColumnDef=\"{{ column }}\" *ngFor=\"let column of displayedColumns\">\r\n\t\t\t<th mat-header-cell *matHeaderCellDef mat-sort-header>{{ column }}</th>\r\n\t\t\t<td mat-cell *matCellDef=\"let element\">\r\n\t\t\t\t<div [ngSwitch]=\"column\">\r\n\t\t\t\t\t<div *ngSwitchCase=\"'Timestamp'\">\r\n\t\t\t\t\t\t<p>{{ element[column].date }}</p>\r\n\t\t\t\t\t\t<p>{{ element[column].time }}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngSwitchCase=\"'RCA'\" class=\"flex-horizontal RCA-cell\">\r\n\t\t\t\t\t\t<img [src]=\"element[column].iconImg\" alt=\"\" />\r\n\t\t\t\t\t\t<p>{{ element[column].status }}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngSwitchDefault>\r\n\t\t\t\t\t\t<p>{{ element[column] }}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</ng-container>\r\n\r\n\t\t<tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n\t\t<tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n\t</table>\r\n\r\n\t<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons aria-label=\"Select page of periodic elements\"> </mat-paginator>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-127637e696b3254bc64089b61bcaf43fa7624407ae255d619794ae2fe3d17a14a19f3eb59018b944e5ed78e80a0c55347353cd0a683469e40b0ca904e759d03b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [
                {
                    "name": "createWebComponents",
                    "args": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { AppComponent } from './app.component';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Injector, NgModule } from '@angular/core';\r\nimport { createCustomElement } from '@angular/elements';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { ButtonComponent } from './button/button.component';\r\nimport { TelcoListComponent } from './telco-list/telco-list.component';\r\nimport { TelcoSearchComponent } from './telco-search/telco-search.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FlexLayoutModule, FlexModule } from '@angular/flex-layout';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TelcoCardsComponent } from './telco-cards/telco-cards.component';\r\nimport { TelcoMapsComponent } from './telco-maps/telco-maps.component';\r\nimport {} from 'google-maps';\r\nimport { TelcoBarChartComponent } from './telco-charts/telco-bar-chart/telco-bar-chart.component';\r\nimport { TelcoPieChartComponent } from './telco-charts/telco-pie-chart/telco-pie-chart.component';\r\nimport { PlotlyViaCDNModule } from 'angular-plotly.js';\r\nimport { TelcoTableComponent } from './telco-table/telco-table.component';\r\n\r\n// for table component\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatSortModule } from '@angular/material/sort';\r\n\r\n// array of web components for exporting\r\nconst components = [\r\n\t{\r\n\t\tname: 'telco-cards',\r\n\t\tcomponent: TelcoCardsComponent,\r\n\t},\r\n\t{\r\n\t\tname: 'telco-button',\r\n\t\tcomponent: ButtonComponent,\r\n\t},\r\n\r\n\t{\r\n\t\tname: 'telco-list',\r\n\t\tcomponent: TelcoListComponent,\r\n\t},\r\n\t{\r\n\t\tname: 'telco-maps',\r\n\t\tcomponent: TelcoMapsComponent,\r\n\t},\r\n];\r\n\r\n@NgModule({\r\n\tdeclarations: [\r\n\t\tAppComponent,\r\n\t\tButtonComponent,\r\n\t\tTelcoListComponent,\r\n\t\tTelcoSearchComponent,\r\n\t\tTelcoCardsComponent,\r\n\t\tTelcoMapsComponent,\r\n\t\tTelcoBarChartComponent,\r\n\t\tTelcoPieChartComponent,\r\n\t\tTelcoTableComponent,\r\n\t],\r\n\timports: [\r\n\t\tBrowserModule,\r\n\t\tNgSelectModule,\r\n\t\tFormsModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tMatIconModule,\r\n\t\tPlotlyViaCDNModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatTableModule,\r\n\t\tMatPaginatorModule,\r\n\t\tMatChipsModule,\r\n\t\tMatSortModule,\r\n\t\tFlexModule,\r\n\t],\r\n\tproviders: [],\r\n\tbootstrap: [AppComponent],\r\n\tentryComponents: components.map((e) => e.component),\r\n})\r\nexport class AppModule {\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.createWebComponents(components, injector);\r\n\t}\r\n\r\n\tcreateWebComponents(component: any, injector: Injector) {\r\n\t\tcomponent.forEach((c: any) => {\r\n\t\t\tconst ce = createCustomElement(c.component, { injector });\r\n\r\n\t\t\tcustomElements.define(c.name, ce);\r\n\r\n\t\t\tc['web-component'] = ce;\r\n\t\t});\r\n\t}\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "TelcoBarChartComponent"
                        },
                        {
                            "name": "TelcoCardsComponent"
                        },
                        {
                            "name": "TelcoListComponent"
                        },
                        {
                            "name": "TelcoMapsComponent"
                        },
                        {
                            "name": "TelcoPieChartComponent"
                        },
                        {
                            "name": "TelcoSearchComponent"
                        },
                        {
                            "name": "TelcoTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "args",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMap",
                "defaultValue": "{\r\n\tconfig: {\r\n\t\ticonDefault: 'SITE',\r\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\r\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\r\n\t\ticonColor: pcolors['application']['palette-2'],\r\n\t\ticonAnchorX: 11,\r\n\t\ticonAnchorY: 11,\r\n\t\tzoomLevelToChangeIcon: 16,\r\n\t\tcenterOnMapUpdate: true,\r\n\t\tshowMesh: true,\r\n\t},\r\n\tmarkers: generateMarkers(1000, [18.6052695, 73.7522604], [18.431485, 73.9796919]),\r\n}"
            },
            {
                "name": "argsConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMap",
                "defaultValue": "{\r\n\tconfig: {\r\n\t\ticonDefault: 'SITE',\r\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\r\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\r\n\t\ticonColor: pcolors['application']['palette-12'],\r\n\t\ticonAnchorX: 15,\r\n\t\ticonAnchorY: 15,\r\n\t\tzoomLevelToChangeIcon: 10,\r\n\t\tcenterOnMapUpdate: true,\r\n\t\tshowMesh: true,\r\n\t},\r\n\tmarkers: generateMarkers(1000, [18.6052695, 73.7522604], [18.431485, 73.9796919]),\r\n}"
            },
            {
                "name": "argsMarkers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMap",
                "defaultValue": "{\r\n\tconfig: {\r\n\t\ticonDefault: 'SITE',\r\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\r\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\r\n\t\ticonColor: pcolors['application']['palette-2'],\r\n\t\ticonAnchorX: 11,\r\n\t\ticonAnchorY: 11,\r\n\t\tzoomLevelToChangeIcon: 16,\r\n\t\tcenterOnMapUpdate: true,\r\n\t\tshowMesh: true,\r\n\t},\r\n\tmarkers: generateMarkers(1000, [30.6052695, 33.7522604], [38.431485, 34.9796919]),\r\n}"
            },
            {
                "name": "Bar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-bar-chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n\t{\r\n\t\tname: 'telco-cards',\r\n\t\tcomponent: TelcoCardsComponent,\r\n\t},\r\n\t{\r\n\t\tname: 'telco-button',\r\n\t\tcomponent: ButtonComponent,\r\n\t},\r\n\r\n\t{\r\n\t\tname: 'telco-list',\r\n\t\tcomponent: TelcoListComponent,\r\n\t},\r\n\t{\r\n\t\tname: 'telco-maps',\r\n\t\tcomponent: TelcoMapsComponent,\r\n\t},\r\n]"
            },
            {
                "name": "Config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ELEMENT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/telco-table/telco-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InputDataInterFace[]",
                "defaultValue": "[\n\t{\n\t\tSiteName: 'Site Name 1',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2022',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 2',\n\t\tCountofAlarm: '09',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'Cell Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 4',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 5',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 6',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 7',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "MarkerClusterer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/telco-maps/telco-maps.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Markers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "markersBackup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n\t{\r\n\t\tid: 'mark-1',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t\tmesh: ['mark-40', 'mark-30'],\r\n\t},\r\n\t{\r\n\t\tid: 'mark-2',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-3',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-4',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-5',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-6',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-7',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t\tcolor: '#FFBF00',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-8',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t\tcolor: '#33B54D',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-9',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-10',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-11',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-12',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-13',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-14',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-15',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-16',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-17',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-18',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-19',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-20',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-21',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-22',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-23',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-24',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-25',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-26',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-27',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-28',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-29',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-30',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-31',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-32',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-33',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-34',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-35',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-36',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-37',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-38',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-39',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-40',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n]"
            },
            {
                "name": "OverlappingMarkerSpiderfier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/telco-maps/telco-maps.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "pcolors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_palette"
            },
            {
                "name": "PieChart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-pie-chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "primaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-bar-chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoBarChartComponent>",
                "defaultValue": "(args: TelcoBarChartComponent) => ({\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n\tComponent: ButtonComponent,\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoCardsComponent>",
                "defaultValue": "(args: TelcoCardsComponent) => ({\r\n\tComponent: TelcoCardsComponent,\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoListComponent>",
                "defaultValue": "(args: TelcoListComponent) => ({\r\n\tComponent: TelcoListComponent,\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-maps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoMapsComponent>",
                "defaultValue": "(args: TelcoMapsComponent) => ({\r\n\tcomponent: TelcoMapsComponent,\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-pie-chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoPieChartComponent>",
                "defaultValue": "(args: TelcoPieChartComponent) => ({\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoTableComponent>",
                "defaultValue": "(args: TelcoTableComponent) => ({\r\n\tComponent: TelcoTableComponent,\r\n\tprops: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telco-search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TelcoSearchComponent>",
                "defaultValue": "(args: TelcoSearchComponent) => ({\r\n\tComponent: TelcoSearchComponent,\r\n\tprops: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "generateMarkers",
                "file": "src/stories/telco-maps.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "count",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "start",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "count",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "start",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "IMapMarkers",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<IMapMarker>",
                "file": "src/app/telco-maps/telco-maps.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/telco-maps.stories.ts": [
                {
                    "name": "args",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMap",
                    "defaultValue": "{\r\n\tconfig: {\r\n\t\ticonDefault: 'SITE',\r\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\r\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\r\n\t\ticonColor: pcolors['application']['palette-2'],\r\n\t\ticonAnchorX: 11,\r\n\t\ticonAnchorY: 11,\r\n\t\tzoomLevelToChangeIcon: 16,\r\n\t\tcenterOnMapUpdate: true,\r\n\t\tshowMesh: true,\r\n\t},\r\n\tmarkers: generateMarkers(1000, [18.6052695, 73.7522604], [18.431485, 73.9796919]),\r\n}"
                },
                {
                    "name": "argsConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMap",
                    "defaultValue": "{\r\n\tconfig: {\r\n\t\ticonDefault: 'SITE',\r\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\r\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\r\n\t\ticonColor: pcolors['application']['palette-12'],\r\n\t\ticonAnchorX: 15,\r\n\t\ticonAnchorY: 15,\r\n\t\tzoomLevelToChangeIcon: 10,\r\n\t\tcenterOnMapUpdate: true,\r\n\t\tshowMesh: true,\r\n\t},\r\n\tmarkers: generateMarkers(1000, [18.6052695, 73.7522604], [18.431485, 73.9796919]),\r\n}"
                },
                {
                    "name": "argsMarkers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMap",
                    "defaultValue": "{\r\n\tconfig: {\r\n\t\ticonDefault: 'SITE',\r\n\t\ticonZoomed: 'SITE_ZOOMED_ALT',\r\n\t\ticonSpiderfied: 'NETWORK_ELEMENT',\r\n\t\ticonColor: pcolors['application']['palette-2'],\r\n\t\ticonAnchorX: 11,\r\n\t\ticonAnchorY: 11,\r\n\t\tzoomLevelToChangeIcon: 16,\r\n\t\tcenterOnMapUpdate: true,\r\n\t\tshowMesh: true,\r\n\t},\r\n\tmarkers: generateMarkers(1000, [30.6052695, 33.7522604], [38.431485, 34.9796919]),\r\n}"
                },
                {
                    "name": "Config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Markers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "markersBackup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n\t{\r\n\t\tid: 'mark-1',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t\tmesh: ['mark-40', 'mark-30'],\r\n\t},\r\n\t{\r\n\t\tid: 'mark-2',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-3',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-4',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-5',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-6',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-7',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t\tcolor: '#FFBF00',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-8',\r\n\t\tlat: '60.393051',\r\n\t\tlng: '5.324171',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torgallmenningen',\r\n\t\tlink: '#thisisalink',\r\n\t\tcolor: '#33B54D',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-9',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-10',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-11',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-12',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-13',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-14',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-15',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-16',\r\n\t\tlat: '60.394998',\r\n\t\tlng: '5.325203',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Torget 2',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-17',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-18',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-19',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-20',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-21',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-22',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-23',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-24',\r\n\t\tlat: '60.342844',\r\n\t\tlng: '5.336836',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Gamlehaugen',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-25',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-26',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-27',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-28',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-29',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-30',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-31',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-32',\r\n\t\tlat: '59.908062',\r\n\t\tlng: '10.751341',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Operahuset',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-33',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-34',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-35',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-36',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-37',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-38',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-39',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n\t{\r\n\t\tid: 'mark-40',\r\n\t\tlat: '59.948985',\r\n\t\tlng: '10.733869',\r\n\t\ttitle: 'Name',\r\n\t\tlabel: 'Ullevål',\r\n\t\tlink: '#thisisalink',\r\n\t},\r\n]"
                },
                {
                    "name": "pcolors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_palette"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-maps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoMapsComponent>",
                    "defaultValue": "(args: TelcoMapsComponent) => ({\r\n\tcomponent: TelcoMapsComponent,\r\n\tprops: args,\r\n})"
                }
            ],
            "src/stories/telco-bar-chart.stories.ts": [
                {
                    "name": "Bar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-bar-chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-bar-chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoBarChartComponent>",
                    "defaultValue": "(args: TelcoBarChartComponent) => ({\r\n\tprops: args,\r\n})"
                }
            ],
            "src/stories/telco-card.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoCardsComponent>",
                    "defaultValue": "(args: TelcoCardsComponent) => ({\r\n\tComponent: TelcoCardsComponent,\r\n\tprops: args,\r\n})"
                }
            ],
            "src/stories/telco-list.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoListComponent>",
                    "defaultValue": "(args: TelcoListComponent) => ({\r\n\tComponent: TelcoListComponent,\r\n\tprops: args,\r\n})"
                }
            ],
            "src/stories/telco-search.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoSearchComponent>",
                    "defaultValue": "(args: TelcoSearchComponent) => ({\r\n\tComponent: TelcoSearchComponent,\r\n\tprops: args,\r\n})"
                }
            ],
            "src/stories/telco-table.stories.ts": [
                {
                    "name": "BasicTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoTableComponent>",
                    "defaultValue": "(args: TelcoTableComponent) => ({\r\n\tComponent: TelcoTableComponent,\r\n\tprops: args,\r\n})"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n\t{\r\n\t\tname: 'telco-cards',\r\n\t\tcomponent: TelcoCardsComponent,\r\n\t},\r\n\t{\r\n\t\tname: 'telco-button',\r\n\t\tcomponent: ButtonComponent,\r\n\t},\r\n\r\n\t{\r\n\t\tname: 'telco-list',\r\n\t\tcomponent: TelcoListComponent,\r\n\t},\r\n\t{\r\n\t\tname: 'telco-maps',\r\n\t\tcomponent: TelcoMapsComponent,\r\n\t},\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/telco-table/telco-table.component.ts": [
                {
                    "name": "ELEMENT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/telco-table/telco-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputDataInterFace[]",
                    "defaultValue": "[\n\t{\n\t\tSiteName: 'Site Name 1',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2022',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 2',\n\t\tCountofAlarm: '09',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'Cell Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 3',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 4',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 5',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 6',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n\t{\n\t\tSiteName: 'Site Name 7',\n\t\tCountofAlarm: '08',\n\t\tTimestamp: {\n\t\t\tdate: '05 Jan,2021',\n\t\t\ttime: '10:00 AM',\n\t\t},\n\t\tRCA: {\n\t\t\ticonImg: '../../assets/table-icons/table-icon.svg',\n\t\t\tstatus: 'RAN - IP Connection Failure',\n\t\t},\n\t},\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/app/telco-maps/telco-maps.component.ts": [
                {
                    "name": "MarkerClusterer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/telco-maps/telco-maps.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "OverlappingMarkerSpiderfier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/telco-maps/telco-maps.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/stories/telco-pie-chart.stories.ts": [
                {
                    "name": "PieChart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-pie-chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-pie-chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TelcoPieChartComponent>",
                    "defaultValue": "(args: TelcoPieChartComponent) => ({\r\n\tprops: args,\r\n})"
                }
            ],
            "src/stories/telco-button.stories.ts": [
                {
                    "name": "primaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telco-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n\tComponent: ButtonComponent,\r\n\tprops: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/stories/telco-maps.stories.ts": [
                {
                    "name": "generateMarkers",
                    "file": "src/stories/telco-maps.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "count",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "start",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/telco-maps/telco-maps.component.ts": [
                {
                    "name": "IMapMarkers",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<IMapMarker>",
                    "file": "src/app/telco-maps/telco-maps.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-cards/telco-cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-charts/telco-bar-chart/telco-bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoBarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-charts/telco-pie-chart/telco-pie-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoPieChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-list/telco-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/map-icons.ts",
                "type": "class",
                "linktype": "classe",
                "name": "mapIcons",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoMapsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMap",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMapBound",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMapConfig",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMapMarker",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MarkerClusterer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-maps/telco-maps.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OverlappingMarkerSpiderfier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-search/telco-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-table/telco-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelcoTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-table/telco-table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputDataInterFace",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/telco-table/telco-table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ELEMENT_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-bar-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-bar-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateMarkers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "args",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "argsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "argsMarkers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Markers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "markersBackup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pcolors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-maps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-pie-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PieChart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-pie-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telco-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}